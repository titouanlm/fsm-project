/** Generated by YAKINDU Statechart Tools code generator. */
package fr.univcotedazur.polytech.si4.fsm.project.defaultsm;

import fr.univcotedazur.polytech.si4.fsm.project.ITimer;
import java.util.LinkedList;
import java.util.List;

public class DefaultSMStatemachine implements IDefaultSMStatemachine {
	protected class SCInterfaceImpl implements SCInterface {
	
		private List<SCInterfaceListener> listeners = new LinkedList<SCInterfaceListener>();
		
		public List<SCInterfaceListener> getListeners() {
			return listeners;
		}
		private boolean money50centsButton;
		
		
		public void raiseMoney50centsButton() {
			synchronized(DefaultSMStatemachine.this) {
				money50centsButton = true;
			}
		}
		
		private boolean money25centsButton;
		
		
		public void raiseMoney25centsButton() {
			synchronized(DefaultSMStatemachine.this) {
				money25centsButton = true;
			}
		}
		
		private boolean money10centsButton;
		
		
		public void raiseMoney10centsButton() {
			synchronized(DefaultSMStatemachine.this) {
				money10centsButton = true;
			}
		}
		
		private boolean coffeeButton;
		
		
		public void raiseCoffeeButton() {
			synchronized(DefaultSMStatemachine.this) {
				coffeeButton = true;
			}
		}
		
		private boolean teaButton;
		
		
		public void raiseTeaButton() {
			synchronized(DefaultSMStatemachine.this) {
				teaButton = true;
			}
		}
		
		private boolean expressoButton;
		
		
		public void raiseExpressoButton() {
			synchronized(DefaultSMStatemachine.this) {
				expressoButton = true;
			}
		}
		
		private boolean soupButton;
		
		
		public void raiseSoupButton() {
			synchronized(DefaultSMStatemachine.this) {
				soupButton = true;
			}
		}
		
		private boolean bipButton;
		
		
		public void raiseBipButton() {
			synchronized(DefaultSMStatemachine.this) {
				bipButton = true;
			}
		}
		
		private boolean cancelButton;
		
		
		public void raiseCancelButton() {
			synchronized(DefaultSMStatemachine.this) {
				cancelButton = true;
			}
		}
		
		private boolean icedTeaButton;
		
		
		public void raiseIcedTeaButton() {
			synchronized(DefaultSMStatemachine.this) {
				icedTeaButton = true;
			}
		}
		
		private boolean addCupButton;
		
		
		public void raiseAddCupButton() {
			synchronized(DefaultSMStatemachine.this) {
				addCupButton = true;
			}
		}
		
		private boolean updateSolde;
		
		
		public boolean isRaisedUpdateSolde() {
			synchronized(DefaultSMStatemachine.this) {
				return updateSolde;
			}
		}
		
		protected void raiseUpdateSolde() {
			synchronized(DefaultSMStatemachine.this) {
				updateSolde = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onUpdateSoldeRaised();
				}
			}
		}
		
		private boolean takeBeverage;
		
		
		public boolean isRaisedTakeBeverage() {
			synchronized(DefaultSMStatemachine.this) {
				return takeBeverage;
			}
		}
		
		protected void raiseTakeBeverage() {
			synchronized(DefaultSMStatemachine.this) {
				takeBeverage = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onTakeBeverageRaised();
				}
			}
		}
		
		private boolean cleaningMachine;
		
		
		public boolean isRaisedCleaningMachine() {
			synchronized(DefaultSMStatemachine.this) {
				return cleaningMachine;
			}
		}
		
		protected void raiseCleaningMachine() {
			synchronized(DefaultSMStatemachine.this) {
				cleaningMachine = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onCleaningMachineRaised();
				}
			}
		}
		
		private boolean machineReady;
		
		
		public boolean isRaisedMachineReady() {
			synchronized(DefaultSMStatemachine.this) {
				return machineReady;
			}
		}
		
		protected void raiseMachineReady() {
			synchronized(DefaultSMStatemachine.this) {
				machineReady = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onMachineReadyRaised();
				}
			}
		}
		
		private boolean beveragePreparation;
		
		
		public boolean isRaisedBeveragePreparation() {
			synchronized(DefaultSMStatemachine.this) {
				return beveragePreparation;
			}
		}
		
		protected void raiseBeveragePreparation() {
			synchronized(DefaultSMStatemachine.this) {
				beveragePreparation = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onBeveragePreparationRaised();
				}
			}
		}
		
		private boolean beverageChoice;
		
		
		public boolean isRaisedBeverageChoice() {
			synchronized(DefaultSMStatemachine.this) {
				return beverageChoice;
			}
		}
		
		protected void raiseBeverageChoice() {
			synchronized(DefaultSMStatemachine.this) {
				beverageChoice = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onBeverageChoiceRaised();
				}
			}
		}
		
		private boolean cancelPreparation;
		
		
		public boolean isRaisedCancelPreparation() {
			synchronized(DefaultSMStatemachine.this) {
				return cancelPreparation;
			}
		}
		
		protected void raiseCancelPreparation() {
			synchronized(DefaultSMStatemachine.this) {
				cancelPreparation = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onCancelPreparationRaised();
				}
			}
		}
		
		private boolean payByNFC;
		
		
		public boolean isRaisedPayByNFC() {
			synchronized(DefaultSMStatemachine.this) {
				return payByNFC;
			}
		}
		
		protected void raisePayByNFC() {
			synchronized(DefaultSMStatemachine.this) {
				payByNFC = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onPayByNFCRaised();
				}
			}
		}
		
		private boolean cancelTransaction;
		
		
		public boolean isRaisedCancelTransaction() {
			synchronized(DefaultSMStatemachine.this) {
				return cancelTransaction;
			}
		}
		
		protected void raiseCancelTransaction() {
			synchronized(DefaultSMStatemachine.this) {
				cancelTransaction = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onCancelTransactionRaised();
				}
			}
		}
		
		private boolean resetSliders;
		
		
		public boolean isRaisedResetSliders() {
			synchronized(DefaultSMStatemachine.this) {
				return resetSliders;
			}
		}
		
		protected void raiseResetSliders() {
			synchronized(DefaultSMStatemachine.this) {
				resetSliders = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onResetSlidersRaised();
				}
			}
		}
		
		private boolean validatePayment;
		
		
		public boolean isRaisedValidatePayment() {
			synchronized(DefaultSMStatemachine.this) {
				return validatePayment;
			}
		}
		
		protected void raiseValidatePayment() {
			synchronized(DefaultSMStatemachine.this) {
				validatePayment = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onValidatePaymentRaised();
				}
			}
		}
		
		private boolean turnOnWaterHeating;
		
		
		public boolean isRaisedTurnOnWaterHeating() {
			synchronized(DefaultSMStatemachine.this) {
				return turnOnWaterHeating;
			}
		}
		
		protected void raiseTurnOnWaterHeating() {
			synchronized(DefaultSMStatemachine.this) {
				turnOnWaterHeating = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onTurnOnWaterHeatingRaised();
				}
			}
		}
		
		private boolean placePod;
		
		
		public boolean isRaisedPlacePod() {
			synchronized(DefaultSMStatemachine.this) {
				return placePod;
			}
		}
		
		protected void raisePlacePod() {
			synchronized(DefaultSMStatemachine.this) {
				placePod = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onPlacePodRaised();
				}
			}
		}
		
		private boolean placeTeaBag;
		
		
		public boolean isRaisedPlaceTeaBag() {
			synchronized(DefaultSMStatemachine.this) {
				return placeTeaBag;
			}
		}
		
		protected void raisePlaceTeaBag() {
			synchronized(DefaultSMStatemachine.this) {
				placeTeaBag = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onPlaceTeaBagRaised();
				}
			}
		}
		
		private boolean grindGrains;
		
		
		public boolean isRaisedGrindGrains() {
			synchronized(DefaultSMStatemachine.this) {
				return grindGrains;
			}
		}
		
		protected void raiseGrindGrains() {
			synchronized(DefaultSMStatemachine.this) {
				grindGrains = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onGrindGrainsRaised();
				}
			}
		}
		
		private boolean placeCup;
		
		
		public boolean isRaisedPlaceCup() {
			synchronized(DefaultSMStatemachine.this) {
				return placeCup;
			}
		}
		
		protected void raisePlaceCup() {
			synchronized(DefaultSMStatemachine.this) {
				placeCup = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onPlaceCupRaised();
				}
			}
		}
		
		private boolean packGrains;
		
		
		public boolean isRaisedPackGrains() {
			synchronized(DefaultSMStatemachine.this) {
				return packGrains;
			}
		}
		
		protected void raisePackGrains() {
			synchronized(DefaultSMStatemachine.this) {
				packGrains = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onPackGrainsRaised();
				}
			}
		}
		
		private boolean waitTemperature;
		
		
		public boolean isRaisedWaitTemperature() {
			synchronized(DefaultSMStatemachine.this) {
				return waitTemperature;
			}
		}
		
		protected void raiseWaitTemperature() {
			synchronized(DefaultSMStatemachine.this) {
				waitTemperature = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onWaitTemperatureRaised();
				}
			}
		}
		
		private boolean flowWater;
		
		
		public boolean isRaisedFlowWater() {
			synchronized(DefaultSMStatemachine.this) {
				return flowWater;
			}
		}
		
		protected void raiseFlowWater() {
			synchronized(DefaultSMStatemachine.this) {
				flowWater = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onFlowWaterRaised();
				}
			}
		}
		
		private boolean addSugar;
		
		
		public boolean isRaisedAddSugar() {
			synchronized(DefaultSMStatemachine.this) {
				return addSugar;
			}
		}
		
		protected void raiseAddSugar() {
			synchronized(DefaultSMStatemachine.this) {
				addSugar = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onAddSugarRaised();
				}
			}
		}
		
		private boolean waitingInfusion;
		
		
		public boolean isRaisedWaitingInfusion() {
			synchronized(DefaultSMStatemachine.this) {
				return waitingInfusion;
			}
		}
		
		protected void raiseWaitingInfusion() {
			synchronized(DefaultSMStatemachine.this) {
				waitingInfusion = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onWaitingInfusionRaised();
				}
			}
		}
		
		private boolean takeChange;
		
		
		public boolean isRaisedTakeChange() {
			synchronized(DefaultSMStatemachine.this) {
				return takeChange;
			}
		}
		
		protected void raiseTakeChange() {
			synchronized(DefaultSMStatemachine.this) {
				takeChange = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onTakeChangeRaised();
				}
			}
		}
		
		private boolean removeTeaBag;
		
		
		public boolean isRaisedRemoveTeaBag() {
			synchronized(DefaultSMStatemachine.this) {
				return removeTeaBag;
			}
		}
		
		protected void raiseRemoveTeaBag() {
			synchronized(DefaultSMStatemachine.this) {
				removeTeaBag = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onRemoveTeaBagRaised();
				}
			}
		}
		
		private boolean flowWaterOK;
		
		
		public boolean isRaisedFlowWaterOK() {
			synchronized(DefaultSMStatemachine.this) {
				return flowWaterOK;
			}
		}
		
		protected void raiseFlowWaterOK() {
			synchronized(DefaultSMStatemachine.this) {
				flowWaterOK = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onFlowWaterOKRaised();
				}
			}
		}
		
		private boolean sugarOK;
		
		
		public boolean isRaisedSugarOK() {
			synchronized(DefaultSMStatemachine.this) {
				return sugarOK;
			}
		}
		
		protected void raiseSugarOK() {
			synchronized(DefaultSMStatemachine.this) {
				sugarOK = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onSugarOKRaised();
				}
			}
		}
		
		private boolean grainPackingOK;
		
		
		public boolean isRaisedGrainPackingOK() {
			synchronized(DefaultSMStatemachine.this) {
				return grainPackingOK;
			}
		}
		
		protected void raiseGrainPackingOK() {
			synchronized(DefaultSMStatemachine.this) {
				grainPackingOK = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onGrainPackingOKRaised();
				}
			}
		}
		
		private boolean waterTempOK;
		
		
		public boolean isRaisedWaterTempOK() {
			synchronized(DefaultSMStatemachine.this) {
				return waterTempOK;
			}
		}
		
		protected void raiseWaterTempOK() {
			synchronized(DefaultSMStatemachine.this) {
				waterTempOK = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onWaterTempOKRaised();
				}
			}
		}
		
		private boolean teaBagOK;
		
		
		public boolean isRaisedTeaBagOK() {
			synchronized(DefaultSMStatemachine.this) {
				return teaBagOK;
			}
		}
		
		protected void raiseTeaBagOK() {
			synchronized(DefaultSMStatemachine.this) {
				teaBagOK = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onTeaBagOKRaised();
				}
			}
		}
		
		private boolean podOK;
		
		
		public boolean isRaisedPodOK() {
			synchronized(DefaultSMStatemachine.this) {
				return podOK;
			}
		}
		
		protected void raisePodOK() {
			synchronized(DefaultSMStatemachine.this) {
				podOK = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onPodOKRaised();
				}
			}
		}
		
		private boolean grainCrushingOK;
		
		
		public boolean isRaisedGrainCrushingOK() {
			synchronized(DefaultSMStatemachine.this) {
				return grainCrushingOK;
			}
		}
		
		protected void raiseGrainCrushingOK() {
			synchronized(DefaultSMStatemachine.this) {
				grainCrushingOK = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onGrainCrushingOKRaised();
				}
			}
		}
		
		private boolean waterHeatingOK;
		
		
		public boolean isRaisedWaterHeatingOK() {
			synchronized(DefaultSMStatemachine.this) {
				return waterHeatingOK;
			}
		}
		
		protected void raiseWaterHeatingOK() {
			synchronized(DefaultSMStatemachine.this) {
				waterHeatingOK = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onWaterHeatingOKRaised();
				}
			}
		}
		
		private boolean cupOK;
		
		
		public boolean isRaisedCupOK() {
			synchronized(DefaultSMStatemachine.this) {
				return cupOK;
			}
		}
		
		protected void raiseCupOK() {
			synchronized(DefaultSMStatemachine.this) {
				cupOK = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onCupOKRaised();
				}
			}
		}
		
		private boolean ownCupOK;
		
		
		public boolean isRaisedOwnCupOK() {
			synchronized(DefaultSMStatemachine.this) {
				return ownCupOK;
			}
		}
		
		protected void raiseOwnCupOK() {
			synchronized(DefaultSMStatemachine.this) {
				ownCupOK = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onOwnCupOKRaised();
				}
			}
		}
		
		private double solde;
		
		public synchronized double getSolde() {
			synchronized(DefaultSMStatemachine.this) {
				return solde;
			}
		}
		
		public void setSolde(double value) {
			synchronized(DefaultSMStatemachine.this) {
				this.solde = value;
			}
		}
		
		private boolean onWire;
		
		public synchronized boolean getOnWire() {
			synchronized(DefaultSMStatemachine.this) {
				return onWire;
			}
		}
		
		public void setOnWire(boolean value) {
			synchronized(DefaultSMStatemachine.this) {
				this.onWire = value;
			}
		}
		
		private boolean ownCup;
		
		public synchronized boolean getOwnCup() {
			synchronized(DefaultSMStatemachine.this) {
				return ownCup;
			}
		}
		
		public void setOwnCup(boolean value) {
			synchronized(DefaultSMStatemachine.this) {
				this.ownCup = value;
			}
		}
		
		private boolean paymentCard;
		
		public synchronized boolean getPaymentCard() {
			synchronized(DefaultSMStatemachine.this) {
				return paymentCard;
			}
		}
		
		public void setPaymentCard(boolean value) {
			synchronized(DefaultSMStatemachine.this) {
				this.paymentCard = value;
			}
		}
		
		private boolean paymentDone;
		
		public synchronized boolean getPaymentDone() {
			synchronized(DefaultSMStatemachine.this) {
				return paymentDone;
			}
		}
		
		public void setPaymentDone(boolean value) {
			synchronized(DefaultSMStatemachine.this) {
				this.paymentDone = value;
			}
		}
		
		private boolean enoughMoney;
		
		public synchronized boolean getEnoughMoney() {
			synchronized(DefaultSMStatemachine.this) {
				return enoughMoney;
			}
		}
		
		public void setEnoughMoney(boolean value) {
			synchronized(DefaultSMStatemachine.this) {
				this.enoughMoney = value;
			}
		}
		
		private String beverageSelected;
		
		public synchronized String getBeverageSelected() {
			synchronized(DefaultSMStatemachine.this) {
				return beverageSelected;
			}
		}
		
		public void setBeverageSelected(String value) {
			synchronized(DefaultSMStatemachine.this) {
				this.beverageSelected = value;
			}
		}
		
		private long temperatureSelected;
		
		public synchronized long getTemperatureSelected() {
			synchronized(DefaultSMStatemachine.this) {
				return temperatureSelected;
			}
		}
		
		public void setTemperatureSelected(long value) {
			synchronized(DefaultSMStatemachine.this) {
				this.temperatureSelected = value;
			}
		}
		
		private long sizeSelected;
		
		public synchronized long getSizeSelected() {
			synchronized(DefaultSMStatemachine.this) {
				return sizeSelected;
			}
		}
		
		public void setSizeSelected(long value) {
			synchronized(DefaultSMStatemachine.this) {
				this.sizeSelected = value;
			}
		}
		
		protected void clearEvents() {
			money50centsButton = false;
			money25centsButton = false;
			money10centsButton = false;
			coffeeButton = false;
			teaButton = false;
			expressoButton = false;
			soupButton = false;
			bipButton = false;
			cancelButton = false;
			icedTeaButton = false;
			addCupButton = false;
		}
		protected void clearOutEvents() {
		
		updateSolde = false;
		takeBeverage = false;
		cleaningMachine = false;
		machineReady = false;
		beveragePreparation = false;
		beverageChoice = false;
		cancelPreparation = false;
		payByNFC = false;
		cancelTransaction = false;
		resetSliders = false;
		validatePayment = false;
		turnOnWaterHeating = false;
		placePod = false;
		placeTeaBag = false;
		grindGrains = false;
		placeCup = false;
		packGrains = false;
		waitTemperature = false;
		flowWater = false;
		addSugar = false;
		waitingInfusion = false;
		takeChange = false;
		removeTeaBag = false;
		flowWaterOK = false;
		sugarOK = false;
		grainPackingOK = false;
		waterTempOK = false;
		teaBagOK = false;
		podOK = false;
		grainCrushingOK = false;
		waterHeatingOK = false;
		cupOK = false;
		ownCupOK = false;
		}
		
	}
	
	
	protected SCInterfaceImpl sCInterface;
	
	private boolean initialized = false;
	
	public enum State {
		_region0_Waiting,
		_region0_Cleaning,
		_region0_Payment_Done,
		_region0_Beverage_Choice,
		_region0_Beverage_Preparation_First_Step,
		_region0_Beverage_Preparation_First_Step_r1_Start_Water_Heating,
		_region0_Beverage_Preparation_First_Step_r1_Water_Heating_ON,
		_region0_Beverage_Preparation_First_Step_r2_CoffeeSelected,
		_region0_Beverage_Preparation_First_Step_r2_Ready,
		_region0_Beverage_Preparation_First_Step_r2_TeaSelected,
		_region0_Beverage_Preparation_First_Step_r2_ExpressoSelected,
		_region0_Beverage_Preparation_First_Step_r2_Pod_In_Place,
		_region0_Beverage_Preparation_First_Step_r2_Tea_Bag_In_Place,
		_region0_Beverage_Preparation_First_Step_r2_Grain_Crushing_OK,
		_region0_Beverage_Preparation_Second_Step,
		_region0_Beverage_Preparation_Second_Step_r1_Waiting_Water_Temperature,
		_region0_Beverage_Preparation_Second_Step_r1_Water_Temperature_OK,
		_region0_Beverage_Preparation_Second_Step_r2_Waiting_Cup_,
		_region0_Beverage_Preparation_Second_Step_r2_Waiting_Grain_Pack,
		_region0_Beverage_Preparation_Second_Step_r2_Cup_In_Place,
		_region0_Beverage_Preparation_Second_Step_r2_Grain_Packing_OK,
		_region0_Beverage_Preparation_Second_Step_r2_Ready2,
		_region0_Beverage_Preparation_Second_Step_r2_Own_Cup_OK,
		_region0_Beverage_Preparation_Second_Step_r2_Cup_Need,
		_region0_Beverage_Preparation_Third_Step,
		_region0_Beverage_Preparation_Third_Step_r1_Start_Water_Flowing,
		_region0_Beverage_Preparation_Third_Step_r1_Water_Flowing_OK,
		_region0_Beverage_Preparation_Third_Step_r2_Add_Sugar,
		_region0_Beverage_Preparation_Third_Step_r2_Sugar_OK,
		_region0_Beverage_Preparation_Last_Step,
		_region0_Beverage_Preparation_Last_Step_r1_Take_beverage,
		_region0_Beverage_Preparation_Last_Step_r1_Waiting_Infusion,
		_region0_Beverage_Preparation_Last_Step_r1_Remove_TeaBag,
		_region0_Take_The_Change,
		paymentByCoins_PaymentByCoins,
		paymentByCoins_WaitingCoins,
		paymentByCoins_ReturnCoins,
		paymentByCoins_Blocked,
		paymentByNFC_WaitingNFC,
		paymentByNFC_PaymentByNFC,
		paymentByNFC_CancelTransaction,
		paymentByNFC_Blocked,
		$NullState$
	};
	
	private final State[] stateVector = new State[4];
	
	private int nextStateIndex;
	
	private ITimer timer;
	
	private final boolean[] timeEvents = new boolean[25];
	
	public DefaultSMStatemachine() {
		sCInterface = new SCInterfaceImpl();
	}
	
	public synchronized void init() {
		this.initialized = true;
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		for (int i = 0; i < 4; i++) {
			stateVector[i] = State.$NullState$;
		}
		clearEvents();
		clearOutEvents();
		sCInterface.setSolde(0.0);
		
		sCInterface.setOnWire(false);
		
		sCInterface.setOwnCup(false);
		
		sCInterface.setPaymentCard(false);
		
		sCInterface.setPaymentDone(false);
		
		sCInterface.setEnoughMoney(false);
		
		sCInterface.setBeverageSelected("");
		
		sCInterface.setTemperatureSelected(0);
		
		sCInterface.setSizeSelected(0);
	}
	
	public synchronized void enter() {
		if (!initialized) {
			throw new IllegalStateException(
				"The state machine needs to be initialized first by calling the init() function."
			);
		}
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		enterSequence__region0_default();
		enterSequence_PaymentByCoins_default();
		enterSequence_PaymentByNFC_default();
	}
	
	public synchronized void runCycle() {
		if (!initialized)
			throw new IllegalStateException(
					"The state machine needs to be initialized first by calling the init() function.");
		clearOutEvents();
		for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
			switch (stateVector[nextStateIndex]) {
			case _region0_Waiting:
				_region0_Waiting_react(true);
				break;
			case _region0_Cleaning:
				_region0_Cleaning_react(true);
				break;
			case _region0_Payment_Done:
				_region0_Payment_Done_react(true);
				break;
			case _region0_Beverage_Choice:
				_region0_Beverage_Choice_react(true);
				break;
			case _region0_Beverage_Preparation_First_Step_r1_Start_Water_Heating:
				_region0_Beverage_Preparation_First_Step_r1_Start_Water_Heating_react(true);
				break;
			case _region0_Beverage_Preparation_First_Step_r1_Water_Heating_ON:
				_region0_Beverage_Preparation_First_Step_r1_Water_Heating_ON_react(true);
				break;
			case _region0_Beverage_Preparation_First_Step_r2_CoffeeSelected:
				_region0_Beverage_Preparation_First_Step_r2_CoffeeSelected_react(true);
				break;
			case _region0_Beverage_Preparation_First_Step_r2_Ready:
				_region0_Beverage_Preparation_First_Step_r2_Ready_react(true);
				break;
			case _region0_Beverage_Preparation_First_Step_r2_TeaSelected:
				_region0_Beverage_Preparation_First_Step_r2_TeaSelected_react(true);
				break;
			case _region0_Beverage_Preparation_First_Step_r2_ExpressoSelected:
				_region0_Beverage_Preparation_First_Step_r2_ExpressoSelected_react(true);
				break;
			case _region0_Beverage_Preparation_First_Step_r2_Pod_In_Place:
				_region0_Beverage_Preparation_First_Step_r2_Pod_In_Place_react(true);
				break;
			case _region0_Beverage_Preparation_First_Step_r2_Tea_Bag_In_Place:
				_region0_Beverage_Preparation_First_Step_r2_Tea_Bag_In_Place_react(true);
				break;
			case _region0_Beverage_Preparation_First_Step_r2_Grain_Crushing_OK:
				_region0_Beverage_Preparation_First_Step_r2_Grain_Crushing_OK_react(true);
				break;
			case _region0_Beverage_Preparation_Second_Step_r1_Waiting_Water_Temperature:
				_region0_Beverage_Preparation_Second_Step_r1_Waiting_Water_Temperature_react(true);
				break;
			case _region0_Beverage_Preparation_Second_Step_r1_Water_Temperature_OK:
				_region0_Beverage_Preparation_Second_Step_r1_Water_Temperature_OK_react(true);
				break;
			case _region0_Beverage_Preparation_Second_Step_r2_Waiting_Cup_:
				_region0_Beverage_Preparation_Second_Step_r2_Waiting_Cup__react(true);
				break;
			case _region0_Beverage_Preparation_Second_Step_r2_Waiting_Grain_Pack:
				_region0_Beverage_Preparation_Second_Step_r2_Waiting_Grain_Pack_react(true);
				break;
			case _region0_Beverage_Preparation_Second_Step_r2_Cup_In_Place:
				_region0_Beverage_Preparation_Second_Step_r2_Cup_In_Place_react(true);
				break;
			case _region0_Beverage_Preparation_Second_Step_r2_Grain_Packing_OK:
				_region0_Beverage_Preparation_Second_Step_r2_Grain_Packing_OK_react(true);
				break;
			case _region0_Beverage_Preparation_Second_Step_r2_Ready2:
				_region0_Beverage_Preparation_Second_Step_r2_Ready2_react(true);
				break;
			case _region0_Beverage_Preparation_Second_Step_r2_Own_Cup_OK:
				_region0_Beverage_Preparation_Second_Step_r2_Own_Cup_OK_react(true);
				break;
			case _region0_Beverage_Preparation_Second_Step_r2_Cup_Need:
				_region0_Beverage_Preparation_Second_Step_r2_Cup_Need_react(true);
				break;
			case _region0_Beverage_Preparation_Third_Step_r1_Start_Water_Flowing:
				_region0_Beverage_Preparation_Third_Step_r1_Start_Water_Flowing_react(true);
				break;
			case _region0_Beverage_Preparation_Third_Step_r1_Water_Flowing_OK:
				_region0_Beverage_Preparation_Third_Step_r1_Water_Flowing_OK_react(true);
				break;
			case _region0_Beverage_Preparation_Third_Step_r2_Add_Sugar:
				_region0_Beverage_Preparation_Third_Step_r2_Add_Sugar_react(true);
				break;
			case _region0_Beverage_Preparation_Third_Step_r2_Sugar_OK:
				_region0_Beverage_Preparation_Third_Step_r2_Sugar_OK_react(true);
				break;
			case _region0_Beverage_Preparation_Last_Step_r1_Take_beverage:
				_region0_Beverage_Preparation_Last_Step_r1_Take_beverage_react(true);
				break;
			case _region0_Beverage_Preparation_Last_Step_r1_Waiting_Infusion:
				_region0_Beverage_Preparation_Last_Step_r1_Waiting_Infusion_react(true);
				break;
			case _region0_Beverage_Preparation_Last_Step_r1_Remove_TeaBag:
				_region0_Beverage_Preparation_Last_Step_r1_Remove_TeaBag_react(true);
				break;
			case _region0_Take_The_Change:
				_region0_Take_The_Change_react(true);
				break;
			case paymentByCoins_PaymentByCoins:
				paymentByCoins_PaymentByCoins_react(true);
				break;
			case paymentByCoins_WaitingCoins:
				paymentByCoins_WaitingCoins_react(true);
				break;
			case paymentByCoins_ReturnCoins:
				paymentByCoins_ReturnCoins_react(true);
				break;
			case paymentByCoins_Blocked:
				paymentByCoins_Blocked_react(true);
				break;
			case paymentByNFC_WaitingNFC:
				paymentByNFC_WaitingNFC_react(true);
				break;
			case paymentByNFC_PaymentByNFC:
				paymentByNFC_PaymentByNFC_react(true);
				break;
			case paymentByNFC_CancelTransaction:
				paymentByNFC_CancelTransaction_react(true);
				break;
			case paymentByNFC_Blocked:
				paymentByNFC_Blocked_react(true);
				break;
			default:
				// $NullState$
			}
		}
		clearEvents();
	}
	public synchronized void exit() {
		exitSequence__region0();
		exitSequence_PaymentByCoins();
		exitSequence_PaymentByNFC();
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public synchronized boolean isActive() {
		return stateVector[0] != State.$NullState$||stateVector[1] != State.$NullState$||stateVector[2] != State.$NullState$||stateVector[3] != State.$NullState$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public synchronized boolean isFinal() {
		return false;
	}
	/**
	* This method resets the incoming events (time events included).
	*/
	protected void clearEvents() {
		sCInterface.clearEvents();
		for (int i=0; i<timeEvents.length; i++) {
			timeEvents[i] = false;
		}
	}
	
	/**
	* This method resets the outgoing events.
	*/
	protected void clearOutEvents() {
		sCInterface.clearOutEvents();
	}
	
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public synchronized boolean isStateActive(State state) {
	
		switch (state) {
		case _region0_Waiting:
			return stateVector[0] == State._region0_Waiting;
		case _region0_Cleaning:
			return stateVector[0] == State._region0_Cleaning;
		case _region0_Payment_Done:
			return stateVector[0] == State._region0_Payment_Done;
		case _region0_Beverage_Choice:
			return stateVector[0] == State._region0_Beverage_Choice;
		case _region0_Beverage_Preparation_First_Step:
			return stateVector[0].ordinal() >= State.
					_region0_Beverage_Preparation_First_Step.ordinal()&& stateVector[0].ordinal() <= State._region0_Beverage_Preparation_First_Step_r2_Grain_Crushing_OK.ordinal();
		case _region0_Beverage_Preparation_First_Step_r1_Start_Water_Heating:
			return stateVector[0] == State._region0_Beverage_Preparation_First_Step_r1_Start_Water_Heating;
		case _region0_Beverage_Preparation_First_Step_r1_Water_Heating_ON:
			return stateVector[0] == State._region0_Beverage_Preparation_First_Step_r1_Water_Heating_ON;
		case _region0_Beverage_Preparation_First_Step_r2_CoffeeSelected:
			return stateVector[1] == State._region0_Beverage_Preparation_First_Step_r2_CoffeeSelected;
		case _region0_Beverage_Preparation_First_Step_r2_Ready:
			return stateVector[1] == State._region0_Beverage_Preparation_First_Step_r2_Ready;
		case _region0_Beverage_Preparation_First_Step_r2_TeaSelected:
			return stateVector[1] == State._region0_Beverage_Preparation_First_Step_r2_TeaSelected;
		case _region0_Beverage_Preparation_First_Step_r2_ExpressoSelected:
			return stateVector[1] == State._region0_Beverage_Preparation_First_Step_r2_ExpressoSelected;
		case _region0_Beverage_Preparation_First_Step_r2_Pod_In_Place:
			return stateVector[1] == State._region0_Beverage_Preparation_First_Step_r2_Pod_In_Place;
		case _region0_Beverage_Preparation_First_Step_r2_Tea_Bag_In_Place:
			return stateVector[1] == State._region0_Beverage_Preparation_First_Step_r2_Tea_Bag_In_Place;
		case _region0_Beverage_Preparation_First_Step_r2_Grain_Crushing_OK:
			return stateVector[1] == State._region0_Beverage_Preparation_First_Step_r2_Grain_Crushing_OK;
		case _region0_Beverage_Preparation_Second_Step:
			return stateVector[0].ordinal() >= State.
					_region0_Beverage_Preparation_Second_Step.ordinal()&& stateVector[0].ordinal() <= State._region0_Beverage_Preparation_Second_Step_r2_Cup_Need.ordinal();
		case _region0_Beverage_Preparation_Second_Step_r1_Waiting_Water_Temperature:
			return stateVector[0] == State._region0_Beverage_Preparation_Second_Step_r1_Waiting_Water_Temperature;
		case _region0_Beverage_Preparation_Second_Step_r1_Water_Temperature_OK:
			return stateVector[0] == State._region0_Beverage_Preparation_Second_Step_r1_Water_Temperature_OK;
		case _region0_Beverage_Preparation_Second_Step_r2_Waiting_Cup_:
			return stateVector[1] == State._region0_Beverage_Preparation_Second_Step_r2_Waiting_Cup_;
		case _region0_Beverage_Preparation_Second_Step_r2_Waiting_Grain_Pack:
			return stateVector[1] == State._region0_Beverage_Preparation_Second_Step_r2_Waiting_Grain_Pack;
		case _region0_Beverage_Preparation_Second_Step_r2_Cup_In_Place:
			return stateVector[1] == State._region0_Beverage_Preparation_Second_Step_r2_Cup_In_Place;
		case _region0_Beverage_Preparation_Second_Step_r2_Grain_Packing_OK:
			return stateVector[1] == State._region0_Beverage_Preparation_Second_Step_r2_Grain_Packing_OK;
		case _region0_Beverage_Preparation_Second_Step_r2_Ready2:
			return stateVector[1] == State._region0_Beverage_Preparation_Second_Step_r2_Ready2;
		case _region0_Beverage_Preparation_Second_Step_r2_Own_Cup_OK:
			return stateVector[1] == State._region0_Beverage_Preparation_Second_Step_r2_Own_Cup_OK;
		case _region0_Beverage_Preparation_Second_Step_r2_Cup_Need:
			return stateVector[1] == State._region0_Beverage_Preparation_Second_Step_r2_Cup_Need;
		case _region0_Beverage_Preparation_Third_Step:
			return stateVector[0].ordinal() >= State.
					_region0_Beverage_Preparation_Third_Step.ordinal()&& stateVector[0].ordinal() <= State._region0_Beverage_Preparation_Third_Step_r2_Sugar_OK.ordinal();
		case _region0_Beverage_Preparation_Third_Step_r1_Start_Water_Flowing:
			return stateVector[0] == State._region0_Beverage_Preparation_Third_Step_r1_Start_Water_Flowing;
		case _region0_Beverage_Preparation_Third_Step_r1_Water_Flowing_OK:
			return stateVector[0] == State._region0_Beverage_Preparation_Third_Step_r1_Water_Flowing_OK;
		case _region0_Beverage_Preparation_Third_Step_r2_Add_Sugar:
			return stateVector[1] == State._region0_Beverage_Preparation_Third_Step_r2_Add_Sugar;
		case _region0_Beverage_Preparation_Third_Step_r2_Sugar_OK:
			return stateVector[1] == State._region0_Beverage_Preparation_Third_Step_r2_Sugar_OK;
		case _region0_Beverage_Preparation_Last_Step:
			return stateVector[0].ordinal() >= State.
					_region0_Beverage_Preparation_Last_Step.ordinal()&& stateVector[0].ordinal() <= State._region0_Beverage_Preparation_Last_Step_r1_Remove_TeaBag.ordinal();
		case _region0_Beverage_Preparation_Last_Step_r1_Take_beverage:
			return stateVector[0] == State._region0_Beverage_Preparation_Last_Step_r1_Take_beverage;
		case _region0_Beverage_Preparation_Last_Step_r1_Waiting_Infusion:
			return stateVector[0] == State._region0_Beverage_Preparation_Last_Step_r1_Waiting_Infusion;
		case _region0_Beverage_Preparation_Last_Step_r1_Remove_TeaBag:
			return stateVector[0] == State._region0_Beverage_Preparation_Last_Step_r1_Remove_TeaBag;
		case _region0_Take_The_Change:
			return stateVector[0] == State._region0_Take_The_Change;
		case paymentByCoins_PaymentByCoins:
			return stateVector[2] == State.paymentByCoins_PaymentByCoins;
		case paymentByCoins_WaitingCoins:
			return stateVector[2] == State.paymentByCoins_WaitingCoins;
		case paymentByCoins_ReturnCoins:
			return stateVector[2] == State.paymentByCoins_ReturnCoins;
		case paymentByCoins_Blocked:
			return stateVector[2] == State.paymentByCoins_Blocked;
		case paymentByNFC_WaitingNFC:
			return stateVector[3] == State.paymentByNFC_WaitingNFC;
		case paymentByNFC_PaymentByNFC:
			return stateVector[3] == State.paymentByNFC_PaymentByNFC;
		case paymentByNFC_CancelTransaction:
			return stateVector[3] == State.paymentByNFC_CancelTransaction;
		case paymentByNFC_Blocked:
			return stateVector[3] == State.paymentByNFC_Blocked;
		default:
			return false;
		}
	}
	
	/**
	* Set the {@link ITimer} for the state machine. It must be set
	* externally on a timed state machine before a run cycle can be correctly
	* executed.
	* 
	* @param timer
	*/
	public synchronized void setTimer(ITimer timer) {
		this.timer = timer;
	}
	
	/**
	* Returns the currently used timer.
	* 
	* @return {@link ITimer}
	*/
	public ITimer getTimer() {
		return timer;
	}
	
	public synchronized void timeElapsed(int eventID) {
		timeEvents[eventID] = true;
	}
	
	public SCInterface getSCInterface() {
		return sCInterface;
	}
	
	public synchronized void raiseMoney50centsButton() {
		sCInterface.raiseMoney50centsButton();
	}
	
	public synchronized void raiseMoney25centsButton() {
		sCInterface.raiseMoney25centsButton();
	}
	
	public synchronized void raiseMoney10centsButton() {
		sCInterface.raiseMoney10centsButton();
	}
	
	public synchronized void raiseCoffeeButton() {
		sCInterface.raiseCoffeeButton();
	}
	
	public synchronized void raiseTeaButton() {
		sCInterface.raiseTeaButton();
	}
	
	public synchronized void raiseExpressoButton() {
		sCInterface.raiseExpressoButton();
	}
	
	public synchronized void raiseSoupButton() {
		sCInterface.raiseSoupButton();
	}
	
	public synchronized void raiseBipButton() {
		sCInterface.raiseBipButton();
	}
	
	public synchronized void raiseCancelButton() {
		sCInterface.raiseCancelButton();
	}
	
	public synchronized void raiseIcedTeaButton() {
		sCInterface.raiseIcedTeaButton();
	}
	
	public synchronized void raiseAddCupButton() {
		sCInterface.raiseAddCupButton();
	}
	
	public synchronized boolean isRaisedUpdateSolde() {
		return sCInterface.isRaisedUpdateSolde();
	}
	
	public synchronized boolean isRaisedTakeBeverage() {
		return sCInterface.isRaisedTakeBeverage();
	}
	
	public synchronized boolean isRaisedCleaningMachine() {
		return sCInterface.isRaisedCleaningMachine();
	}
	
	public synchronized boolean isRaisedMachineReady() {
		return sCInterface.isRaisedMachineReady();
	}
	
	public synchronized boolean isRaisedBeveragePreparation() {
		return sCInterface.isRaisedBeveragePreparation();
	}
	
	public synchronized boolean isRaisedBeverageChoice() {
		return sCInterface.isRaisedBeverageChoice();
	}
	
	public synchronized boolean isRaisedCancelPreparation() {
		return sCInterface.isRaisedCancelPreparation();
	}
	
	public synchronized boolean isRaisedPayByNFC() {
		return sCInterface.isRaisedPayByNFC();
	}
	
	public synchronized boolean isRaisedCancelTransaction() {
		return sCInterface.isRaisedCancelTransaction();
	}
	
	public synchronized boolean isRaisedResetSliders() {
		return sCInterface.isRaisedResetSliders();
	}
	
	public synchronized boolean isRaisedValidatePayment() {
		return sCInterface.isRaisedValidatePayment();
	}
	
	public synchronized boolean isRaisedTurnOnWaterHeating() {
		return sCInterface.isRaisedTurnOnWaterHeating();
	}
	
	public synchronized boolean isRaisedPlacePod() {
		return sCInterface.isRaisedPlacePod();
	}
	
	public synchronized boolean isRaisedPlaceTeaBag() {
		return sCInterface.isRaisedPlaceTeaBag();
	}
	
	public synchronized boolean isRaisedGrindGrains() {
		return sCInterface.isRaisedGrindGrains();
	}
	
	public synchronized boolean isRaisedPlaceCup() {
		return sCInterface.isRaisedPlaceCup();
	}
	
	public synchronized boolean isRaisedPackGrains() {
		return sCInterface.isRaisedPackGrains();
	}
	
	public synchronized boolean isRaisedWaitTemperature() {
		return sCInterface.isRaisedWaitTemperature();
	}
	
	public synchronized boolean isRaisedFlowWater() {
		return sCInterface.isRaisedFlowWater();
	}
	
	public synchronized boolean isRaisedAddSugar() {
		return sCInterface.isRaisedAddSugar();
	}
	
	public synchronized boolean isRaisedWaitingInfusion() {
		return sCInterface.isRaisedWaitingInfusion();
	}
	
	public synchronized boolean isRaisedTakeChange() {
		return sCInterface.isRaisedTakeChange();
	}
	
	public synchronized boolean isRaisedRemoveTeaBag() {
		return sCInterface.isRaisedRemoveTeaBag();
	}
	
	public synchronized boolean isRaisedFlowWaterOK() {
		return sCInterface.isRaisedFlowWaterOK();
	}
	
	public synchronized boolean isRaisedSugarOK() {
		return sCInterface.isRaisedSugarOK();
	}
	
	public synchronized boolean isRaisedGrainPackingOK() {
		return sCInterface.isRaisedGrainPackingOK();
	}
	
	public synchronized boolean isRaisedWaterTempOK() {
		return sCInterface.isRaisedWaterTempOK();
	}
	
	public synchronized boolean isRaisedTeaBagOK() {
		return sCInterface.isRaisedTeaBagOK();
	}
	
	public synchronized boolean isRaisedPodOK() {
		return sCInterface.isRaisedPodOK();
	}
	
	public synchronized boolean isRaisedGrainCrushingOK() {
		return sCInterface.isRaisedGrainCrushingOK();
	}
	
	public synchronized boolean isRaisedWaterHeatingOK() {
		return sCInterface.isRaisedWaterHeatingOK();
	}
	
	public synchronized boolean isRaisedCupOK() {
		return sCInterface.isRaisedCupOK();
	}
	
	public synchronized boolean isRaisedOwnCupOK() {
		return sCInterface.isRaisedOwnCupOK();
	}
	
	public synchronized double getSolde() {
		return sCInterface.getSolde();
	}
	
	public synchronized void setSolde(double value) {
		sCInterface.setSolde(value);
	}
	
	public synchronized boolean getOnWire() {
		return sCInterface.getOnWire();
	}
	
	public synchronized void setOnWire(boolean value) {
		sCInterface.setOnWire(value);
	}
	
	public synchronized boolean getOwnCup() {
		return sCInterface.getOwnCup();
	}
	
	public synchronized void setOwnCup(boolean value) {
		sCInterface.setOwnCup(value);
	}
	
	public synchronized boolean getPaymentCard() {
		return sCInterface.getPaymentCard();
	}
	
	public synchronized void setPaymentCard(boolean value) {
		sCInterface.setPaymentCard(value);
	}
	
	public synchronized boolean getPaymentDone() {
		return sCInterface.getPaymentDone();
	}
	
	public synchronized void setPaymentDone(boolean value) {
		sCInterface.setPaymentDone(value);
	}
	
	public synchronized boolean getEnoughMoney() {
		return sCInterface.getEnoughMoney();
	}
	
	public synchronized void setEnoughMoney(boolean value) {
		sCInterface.setEnoughMoney(value);
	}
	
	public synchronized String getBeverageSelected() {
		return sCInterface.getBeverageSelected();
	}
	
	public synchronized void setBeverageSelected(String value) {
		sCInterface.setBeverageSelected(value);
	}
	
	public synchronized long getTemperatureSelected() {
		return sCInterface.getTemperatureSelected();
	}
	
	public synchronized void setTemperatureSelected(long value) {
		sCInterface.setTemperatureSelected(value);
	}
	
	public synchronized long getSizeSelected() {
		return sCInterface.getSizeSelected();
	}
	
	public synchronized void setSizeSelected(long value) {
		sCInterface.setSizeSelected(value);
	}
	
	private boolean check__region0_Beverage_Preparation_First_Step_r2__choice_0_tr0_tr0() {
		return (sCInterface.getBeverageSelected()== null?"café" ==null :sCInterface.getBeverageSelected().equals("café"));
	}
	
	private boolean check__region0_Beverage_Preparation_First_Step_r2__choice_0_tr1_tr1() {
		return (sCInterface.getBeverageSelected()== null?"thé" ==null :sCInterface.getBeverageSelected().equals("thé"));
	}
	
	private boolean check__region0_Beverage_Preparation_Second_Step_r2__choice_0_tr0_tr0() {
		return (sCInterface.getBeverageSelected()== null?"expresso" ==null :sCInterface.getBeverageSelected().equals("expresso"));
	}
	
	private boolean check__region0_Beverage_Preparation_Second_Step_r2__choice_1_tr0_tr0() {
		return sCInterface.getOwnCup()==true;
	}
	
	private boolean check__region0_Beverage_Preparation_Last_Step_r1__choice_0_tr0_tr0() {
		return (sCInterface.getBeverageSelected()== null?"thé" ==null :sCInterface.getBeverageSelected().equals("thé"));
	}
	
	private void effect__region0_Beverage_Preparation_First_Step_r2__choice_0_tr0() {
		enterSequence__region0_Beverage_Preparation_First_Step_r2_CoffeeSelected_default();
	}
	
	private void effect__region0_Beverage_Preparation_First_Step_r2__choice_0_tr1() {
		enterSequence__region0_Beverage_Preparation_First_Step_r2_TeaSelected_default();
	}
	
	private void effect__region0_Beverage_Preparation_First_Step_r2__choice_0_tr2() {
		enterSequence__region0_Beverage_Preparation_First_Step_r2_ExpressoSelected_default();
	}
	
	private void effect__region0_Beverage_Preparation_Second_Step_r2__choice_0_tr0() {
		enterSequence__region0_Beverage_Preparation_Second_Step_r2_Waiting_Grain_Pack_default();
	}
	
	private void effect__region0_Beverage_Preparation_Second_Step_r2__choice_0_tr1() {
		enterSequence__region0_Beverage_Preparation_Second_Step_r2_Ready2_default();
	}
	
	private void effect__region0_Beverage_Preparation_Second_Step_r2__choice_1_tr0() {
		enterSequence__region0_Beverage_Preparation_Second_Step_r2_Own_Cup_OK_default();
	}
	
	private void effect__region0_Beverage_Preparation_Second_Step_r2__choice_1_tr1() {
		enterSequence__region0_Beverage_Preparation_Second_Step_r2_Cup_Need_default();
	}
	
	private void effect__region0_Beverage_Preparation_Last_Step_r1__choice_0_tr0() {
		enterSequence__region0_Beverage_Preparation_Last_Step_r1_Waiting_Infusion_default();
	}
	
	private void effect__region0_Beverage_Preparation_Last_Step_r1__choice_0_tr1() {
		enterSequence__region0_Beverage_Preparation_Last_Step_r1_Take_beverage_default();
	}
	
	/* Entry action for state 'Waiting'. */
	private void entryAction__region0_Waiting() {
		sCInterface.raiseMachineReady();
	}
	
	/* Entry action for state 'Cleaning'. */
	private void entryAction__region0_Cleaning() {
		timer.setTimer(this, 0, (3 * 1000), false);
		
		sCInterface.setPaymentDone(false);
	}
	
	/* Entry action for state 'Payment Done'. */
	private void entryAction__region0_Payment_Done() {
		timer.setTimer(this, 1, (2 * 1000), false);
		
		sCInterface.setPaymentDone(true);
	}
	
	/* Entry action for state 'Beverage Choice'. */
	private void entryAction__region0_Beverage_Choice() {
		timer.setTimer(this, 2, (45 * 1000), false);
	}
	
	/* Entry action for state 'Start Water Heating'. */
	private void entryAction__region0_Beverage_Preparation_First_Step_r1_Start_Water_Heating() {
		timer.setTimer(this, 3, 1500, false);
		
		sCInterface.raiseTurnOnWaterHeating();
	}
	
	/* Entry action for state 'Water Heating ON'. */
	private void entryAction__region0_Beverage_Preparation_First_Step_r1_Water_Heating_ON() {
		sCInterface.raiseWaterHeatingOK();
	}
	
	/* Entry action for state 'CoffeeSelected'. */
	private void entryAction__region0_Beverage_Preparation_First_Step_r2_CoffeeSelected() {
		timer.setTimer(this, 4, 2500, false);
		
		sCInterface.raisePlacePod();
	}
	
	/* Entry action for state 'TeaSelected'. */
	private void entryAction__region0_Beverage_Preparation_First_Step_r2_TeaSelected() {
		timer.setTimer(this, 5, 2500, false);
		
		sCInterface.raisePlaceTeaBag();
	}
	
	/* Entry action for state 'ExpressoSelected'. */
	private void entryAction__region0_Beverage_Preparation_First_Step_r2_ExpressoSelected() {
		timer.setTimer(this, 6, (4 * 1000), false);
		
		sCInterface.raiseGrindGrains();
	}
	
	/* Entry action for state 'Pod In Place'. */
	private void entryAction__region0_Beverage_Preparation_First_Step_r2_Pod_In_Place() {
		sCInterface.raisePodOK();
	}
	
	/* Entry action for state 'Tea Bag In Place'. */
	private void entryAction__region0_Beverage_Preparation_First_Step_r2_Tea_Bag_In_Place() {
		sCInterface.raiseTeaBagOK();
	}
	
	/* Entry action for state 'Grain Crushing OK'. */
	private void entryAction__region0_Beverage_Preparation_First_Step_r2_Grain_Crushing_OK() {
		sCInterface.raiseGrainCrushingOK();
	}
	
	/* Entry action for state 'Waiting Water Temperature'. */
	private void entryAction__region0_Beverage_Preparation_Second_Step_r1_Waiting_Water_Temperature() {
		timer.setTimer(this, 7, ((sCInterface.getTemperatureSelected() * 100)), false);
		
		sCInterface.raiseWaitTemperature();
	}
	
	/* Entry action for state 'Water Temperature OK'. */
	private void entryAction__region0_Beverage_Preparation_Second_Step_r1_Water_Temperature_OK() {
		sCInterface.raiseWaterTempOK();
	}
	
	/* Entry action for state 'Waiting Grain Pack'. */
	private void entryAction__region0_Beverage_Preparation_Second_Step_r2_Waiting_Grain_Pack() {
		timer.setTimer(this, 8, ((sCInterface.getSizeSelected() * 1500)), false);
		
		sCInterface.raisePackGrains();
	}
	
	/* Entry action for state 'Cup In Place'. */
	private void entryAction__region0_Beverage_Preparation_Second_Step_r2_Cup_In_Place() {
		sCInterface.raiseCupOK();
	}
	
	/* Entry action for state 'Grain Packing OK'. */
	private void entryAction__region0_Beverage_Preparation_Second_Step_r2_Grain_Packing_OK() {
		sCInterface.raiseGrainPackingOK();
	}
	
	/* Entry action for state 'Own Cup OK'. */
	private void entryAction__region0_Beverage_Preparation_Second_Step_r2_Own_Cup_OK() {
		sCInterface.raiseOwnCupOK();
	}
	
	/* Entry action for state 'Cup Need'. */
	private void entryAction__region0_Beverage_Preparation_Second_Step_r2_Cup_Need() {
		timer.setTimer(this, 9, (3 * 1000), false);
		
		sCInterface.raisePlaceCup();
	}
	
	/* Entry action for state 'Start Water Flowing'. */
	private void entryAction__region0_Beverage_Preparation_Third_Step_r1_Start_Water_Flowing() {
		timer.setTimer(this, 10, (((3 * sCInterface.getSizeSelected())) * 1000), false);
		
		sCInterface.raiseFlowWater();
	}
	
	/* Entry action for state 'Water Flowing OK'. */
	private void entryAction__region0_Beverage_Preparation_Third_Step_r1_Water_Flowing_OK() {
		sCInterface.raiseFlowWaterOK();
	}
	
	/* Entry action for state 'Add Sugar'. */
	private void entryAction__region0_Beverage_Preparation_Third_Step_r2_Add_Sugar() {
		timer.setTimer(this, 11, (2 * 1000), false);
		
		sCInterface.raiseAddSugar();
	}
	
	/* Entry action for state 'Sugar OK'. */
	private void entryAction__region0_Beverage_Preparation_Third_Step_r2_Sugar_OK() {
		sCInterface.raiseSugarOK();
	}
	
	/* Entry action for state 'Take beverage'. */
	private void entryAction__region0_Beverage_Preparation_Last_Step_r1_Take_beverage() {
		timer.setTimer(this, 12, (5 * 1000), false);
		
		sCInterface.raiseTakeBeverage();
	}
	
	/* Entry action for state 'Waiting Infusion'. */
	private void entryAction__region0_Beverage_Preparation_Last_Step_r1_Waiting_Infusion() {
		timer.setTimer(this, 13, (3 * 1000), false);
		
		sCInterface.raiseWaitingInfusion();
	}
	
	/* Entry action for state 'Remove TeaBag'. */
	private void entryAction__region0_Beverage_Preparation_Last_Step_r1_Remove_TeaBag() {
		timer.setTimer(this, 14, (2 * 1000), false);
		
		sCInterface.raiseRemoveTeaBag();
	}
	
	/* Entry action for state 'Take The Change'. */
	private void entryAction__region0_Take_The_Change() {
		timer.setTimer(this, 15, (3 * 1000), false);
		
		sCInterface.raiseTakeChange();
	}
	
	/* Entry action for state 'PaymentByCoins'. */
	private void entryAction_PaymentByCoins_PaymentByCoins() {
		timer.setTimer(this, 16, (45 * 1000), false);
	}
	
	/* Entry action for state 'WaitingCoins'. */
	private void entryAction_PaymentByCoins_WaitingCoins() {
		timer.setTimer(this, 17, 100, true);
	}
	
	/* Entry action for state 'ReturnCoins'. */
	private void entryAction_PaymentByCoins_ReturnCoins() {
		timer.setTimer(this, 18, (5 * 1000), false);
	}
	
	/* Entry action for state 'Blocked'. */
	private void entryAction_PaymentByCoins_Blocked() {
		timer.setTimer(this, 19, 100, true);
	}
	
	/* Entry action for state 'WaitingNFC'. */
	private void entryAction_PaymentByNFC_WaitingNFC() {
		timer.setTimer(this, 20, 100, true);
	}
	
	/* Entry action for state 'PaymentByNFC'. */
	private void entryAction_PaymentByNFC_PaymentByNFC() {
		timer.setTimer(this, 21, (45 * 1000), false);
		
		timer.setTimer(this, 22, 1, true);
	}
	
	/* Entry action for state 'CancelTransaction'. */
	private void entryAction_PaymentByNFC_CancelTransaction() {
		timer.setTimer(this, 23, (5 * 1000), false);
	}
	
	/* Entry action for state 'Blocked'. */
	private void entryAction_PaymentByNFC_Blocked() {
		timer.setTimer(this, 24, 100, true);
	}
	
	/* Exit action for state 'Cleaning'. */
	private void exitAction__region0_Cleaning() {
		timer.unsetTimer(this, 0);
	}
	
	/* Exit action for state 'Payment Done'. */
	private void exitAction__region0_Payment_Done() {
		timer.unsetTimer(this, 1);
	}
	
	/* Exit action for state 'Beverage Choice'. */
	private void exitAction__region0_Beverage_Choice() {
		timer.unsetTimer(this, 2);
	}
	
	/* Exit action for state 'Start Water Heating'. */
	private void exitAction__region0_Beverage_Preparation_First_Step_r1_Start_Water_Heating() {
		timer.unsetTimer(this, 3);
	}
	
	/* Exit action for state 'CoffeeSelected'. */
	private void exitAction__region0_Beverage_Preparation_First_Step_r2_CoffeeSelected() {
		timer.unsetTimer(this, 4);
	}
	
	/* Exit action for state 'TeaSelected'. */
	private void exitAction__region0_Beverage_Preparation_First_Step_r2_TeaSelected() {
		timer.unsetTimer(this, 5);
	}
	
	/* Exit action for state 'ExpressoSelected'. */
	private void exitAction__region0_Beverage_Preparation_First_Step_r2_ExpressoSelected() {
		timer.unsetTimer(this, 6);
	}
	
	/* Exit action for state 'Waiting Water Temperature'. */
	private void exitAction__region0_Beverage_Preparation_Second_Step_r1_Waiting_Water_Temperature() {
		timer.unsetTimer(this, 7);
	}
	
	/* Exit action for state 'Waiting Grain Pack'. */
	private void exitAction__region0_Beverage_Preparation_Second_Step_r2_Waiting_Grain_Pack() {
		timer.unsetTimer(this, 8);
	}
	
	/* Exit action for state 'Cup Need'. */
	private void exitAction__region0_Beverage_Preparation_Second_Step_r2_Cup_Need() {
		timer.unsetTimer(this, 9);
	}
	
	/* Exit action for state 'Start Water Flowing'. */
	private void exitAction__region0_Beverage_Preparation_Third_Step_r1_Start_Water_Flowing() {
		timer.unsetTimer(this, 10);
	}
	
	/* Exit action for state 'Add Sugar'. */
	private void exitAction__region0_Beverage_Preparation_Third_Step_r2_Add_Sugar() {
		timer.unsetTimer(this, 11);
	}
	
	/* Exit action for state 'Take beverage'. */
	private void exitAction__region0_Beverage_Preparation_Last_Step_r1_Take_beverage() {
		timer.unsetTimer(this, 12);
	}
	
	/* Exit action for state 'Waiting Infusion'. */
	private void exitAction__region0_Beverage_Preparation_Last_Step_r1_Waiting_Infusion() {
		timer.unsetTimer(this, 13);
	}
	
	/* Exit action for state 'Remove TeaBag'. */
	private void exitAction__region0_Beverage_Preparation_Last_Step_r1_Remove_TeaBag() {
		timer.unsetTimer(this, 14);
	}
	
	/* Exit action for state 'Take The Change'. */
	private void exitAction__region0_Take_The_Change() {
		timer.unsetTimer(this, 15);
	}
	
	/* Exit action for state 'PaymentByCoins'. */
	private void exitAction_PaymentByCoins_PaymentByCoins() {
		timer.unsetTimer(this, 16);
	}
	
	/* Exit action for state 'WaitingCoins'. */
	private void exitAction_PaymentByCoins_WaitingCoins() {
		timer.unsetTimer(this, 17);
	}
	
	/* Exit action for state 'ReturnCoins'. */
	private void exitAction_PaymentByCoins_ReturnCoins() {
		timer.unsetTimer(this, 18);
	}
	
	/* Exit action for state 'Blocked'. */
	private void exitAction_PaymentByCoins_Blocked() {
		timer.unsetTimer(this, 19);
	}
	
	/* Exit action for state 'WaitingNFC'. */
	private void exitAction_PaymentByNFC_WaitingNFC() {
		timer.unsetTimer(this, 20);
	}
	
	/* Exit action for state 'PaymentByNFC'. */
	private void exitAction_PaymentByNFC_PaymentByNFC() {
		timer.unsetTimer(this, 21);
		
		timer.unsetTimer(this, 22);
	}
	
	/* Exit action for state 'CancelTransaction'. */
	private void exitAction_PaymentByNFC_CancelTransaction() {
		timer.unsetTimer(this, 23);
	}
	
	/* Exit action for state 'Blocked'. */
	private void exitAction_PaymentByNFC_Blocked() {
		timer.unsetTimer(this, 24);
	}
	
	/* 'default' enter sequence for state Waiting */
	private void enterSequence__region0_Waiting_default() {
		entryAction__region0_Waiting();
		nextStateIndex = 0;
		stateVector[0] = State._region0_Waiting;
	}
	
	/* 'default' enter sequence for state Cleaning */
	private void enterSequence__region0_Cleaning_default() {
		entryAction__region0_Cleaning();
		nextStateIndex = 0;
		stateVector[0] = State._region0_Cleaning;
	}
	
	/* 'default' enter sequence for state Payment Done */
	private void enterSequence__region0_Payment_Done_default() {
		entryAction__region0_Payment_Done();
		nextStateIndex = 0;
		stateVector[0] = State._region0_Payment_Done;
	}
	
	/* 'default' enter sequence for state Beverage Choice */
	private void enterSequence__region0_Beverage_Choice_default() {
		entryAction__region0_Beverage_Choice();
		nextStateIndex = 0;
		stateVector[0] = State._region0_Beverage_Choice;
	}
	
	/* 'default' enter sequence for state Start Water Heating */
	private void enterSequence__region0_Beverage_Preparation_First_Step_r1_Start_Water_Heating_default() {
		entryAction__region0_Beverage_Preparation_First_Step_r1_Start_Water_Heating();
		nextStateIndex = 0;
		stateVector[0] = State._region0_Beverage_Preparation_First_Step_r1_Start_Water_Heating;
	}
	
	/* 'default' enter sequence for state Water Heating ON */
	private void enterSequence__region0_Beverage_Preparation_First_Step_r1_Water_Heating_ON_default() {
		entryAction__region0_Beverage_Preparation_First_Step_r1_Water_Heating_ON();
		nextStateIndex = 0;
		stateVector[0] = State._region0_Beverage_Preparation_First_Step_r1_Water_Heating_ON;
	}
	
	/* 'default' enter sequence for state CoffeeSelected */
	private void enterSequence__region0_Beverage_Preparation_First_Step_r2_CoffeeSelected_default() {
		entryAction__region0_Beverage_Preparation_First_Step_r2_CoffeeSelected();
		nextStateIndex = 1;
		stateVector[1] = State._region0_Beverage_Preparation_First_Step_r2_CoffeeSelected;
	}
	
	/* 'default' enter sequence for state Ready */
	private void enterSequence__region0_Beverage_Preparation_First_Step_r2_Ready_default() {
		nextStateIndex = 1;
		stateVector[1] = State._region0_Beverage_Preparation_First_Step_r2_Ready;
	}
	
	/* 'default' enter sequence for state TeaSelected */
	private void enterSequence__region0_Beverage_Preparation_First_Step_r2_TeaSelected_default() {
		entryAction__region0_Beverage_Preparation_First_Step_r2_TeaSelected();
		nextStateIndex = 1;
		stateVector[1] = State._region0_Beverage_Preparation_First_Step_r2_TeaSelected;
	}
	
	/* 'default' enter sequence for state ExpressoSelected */
	private void enterSequence__region0_Beverage_Preparation_First_Step_r2_ExpressoSelected_default() {
		entryAction__region0_Beverage_Preparation_First_Step_r2_ExpressoSelected();
		nextStateIndex = 1;
		stateVector[1] = State._region0_Beverage_Preparation_First_Step_r2_ExpressoSelected;
	}
	
	/* 'default' enter sequence for state Pod In Place */
	private void enterSequence__region0_Beverage_Preparation_First_Step_r2_Pod_In_Place_default() {
		entryAction__region0_Beverage_Preparation_First_Step_r2_Pod_In_Place();
		nextStateIndex = 1;
		stateVector[1] = State._region0_Beverage_Preparation_First_Step_r2_Pod_In_Place;
	}
	
	/* 'default' enter sequence for state Tea Bag In Place */
	private void enterSequence__region0_Beverage_Preparation_First_Step_r2_Tea_Bag_In_Place_default() {
		entryAction__region0_Beverage_Preparation_First_Step_r2_Tea_Bag_In_Place();
		nextStateIndex = 1;
		stateVector[1] = State._region0_Beverage_Preparation_First_Step_r2_Tea_Bag_In_Place;
	}
	
	/* 'default' enter sequence for state Grain Crushing OK */
	private void enterSequence__region0_Beverage_Preparation_First_Step_r2_Grain_Crushing_OK_default() {
		entryAction__region0_Beverage_Preparation_First_Step_r2_Grain_Crushing_OK();
		nextStateIndex = 1;
		stateVector[1] = State._region0_Beverage_Preparation_First_Step_r2_Grain_Crushing_OK;
	}
	
	/* 'default' enter sequence for state Waiting Water Temperature */
	private void enterSequence__region0_Beverage_Preparation_Second_Step_r1_Waiting_Water_Temperature_default() {
		entryAction__region0_Beverage_Preparation_Second_Step_r1_Waiting_Water_Temperature();
		nextStateIndex = 0;
		stateVector[0] = State._region0_Beverage_Preparation_Second_Step_r1_Waiting_Water_Temperature;
	}
	
	/* 'default' enter sequence for state Water Temperature OK */
	private void enterSequence__region0_Beverage_Preparation_Second_Step_r1_Water_Temperature_OK_default() {
		entryAction__region0_Beverage_Preparation_Second_Step_r1_Water_Temperature_OK();
		nextStateIndex = 0;
		stateVector[0] = State._region0_Beverage_Preparation_Second_Step_r1_Water_Temperature_OK;
	}
	
	/* 'default' enter sequence for state Waiting Cup  */
	private void enterSequence__region0_Beverage_Preparation_Second_Step_r2_Waiting_Cup__default() {
		nextStateIndex = 1;
		stateVector[1] = State._region0_Beverage_Preparation_Second_Step_r2_Waiting_Cup_;
	}
	
	/* 'default' enter sequence for state Waiting Grain Pack */
	private void enterSequence__region0_Beverage_Preparation_Second_Step_r2_Waiting_Grain_Pack_default() {
		entryAction__region0_Beverage_Preparation_Second_Step_r2_Waiting_Grain_Pack();
		nextStateIndex = 1;
		stateVector[1] = State._region0_Beverage_Preparation_Second_Step_r2_Waiting_Grain_Pack;
	}
	
	/* 'default' enter sequence for state Cup In Place */
	private void enterSequence__region0_Beverage_Preparation_Second_Step_r2_Cup_In_Place_default() {
		entryAction__region0_Beverage_Preparation_Second_Step_r2_Cup_In_Place();
		nextStateIndex = 1;
		stateVector[1] = State._region0_Beverage_Preparation_Second_Step_r2_Cup_In_Place;
	}
	
	/* 'default' enter sequence for state Grain Packing OK */
	private void enterSequence__region0_Beverage_Preparation_Second_Step_r2_Grain_Packing_OK_default() {
		entryAction__region0_Beverage_Preparation_Second_Step_r2_Grain_Packing_OK();
		nextStateIndex = 1;
		stateVector[1] = State._region0_Beverage_Preparation_Second_Step_r2_Grain_Packing_OK;
	}
	
	/* 'default' enter sequence for state Ready2 */
	private void enterSequence__region0_Beverage_Preparation_Second_Step_r2_Ready2_default() {
		nextStateIndex = 1;
		stateVector[1] = State._region0_Beverage_Preparation_Second_Step_r2_Ready2;
	}
	
	/* 'default' enter sequence for state Own Cup OK */
	private void enterSequence__region0_Beverage_Preparation_Second_Step_r2_Own_Cup_OK_default() {
		entryAction__region0_Beverage_Preparation_Second_Step_r2_Own_Cup_OK();
		nextStateIndex = 1;
		stateVector[1] = State._region0_Beverage_Preparation_Second_Step_r2_Own_Cup_OK;
	}
	
	/* 'default' enter sequence for state Cup Need */
	private void enterSequence__region0_Beverage_Preparation_Second_Step_r2_Cup_Need_default() {
		entryAction__region0_Beverage_Preparation_Second_Step_r2_Cup_Need();
		nextStateIndex = 1;
		stateVector[1] = State._region0_Beverage_Preparation_Second_Step_r2_Cup_Need;
	}
	
	/* 'default' enter sequence for state Start Water Flowing */
	private void enterSequence__region0_Beverage_Preparation_Third_Step_r1_Start_Water_Flowing_default() {
		entryAction__region0_Beverage_Preparation_Third_Step_r1_Start_Water_Flowing();
		nextStateIndex = 0;
		stateVector[0] = State._region0_Beverage_Preparation_Third_Step_r1_Start_Water_Flowing;
	}
	
	/* 'default' enter sequence for state Water Flowing OK */
	private void enterSequence__region0_Beverage_Preparation_Third_Step_r1_Water_Flowing_OK_default() {
		entryAction__region0_Beverage_Preparation_Third_Step_r1_Water_Flowing_OK();
		nextStateIndex = 0;
		stateVector[0] = State._region0_Beverage_Preparation_Third_Step_r1_Water_Flowing_OK;
	}
	
	/* 'default' enter sequence for state Add Sugar */
	private void enterSequence__region0_Beverage_Preparation_Third_Step_r2_Add_Sugar_default() {
		entryAction__region0_Beverage_Preparation_Third_Step_r2_Add_Sugar();
		nextStateIndex = 1;
		stateVector[1] = State._region0_Beverage_Preparation_Third_Step_r2_Add_Sugar;
	}
	
	/* 'default' enter sequence for state Sugar OK */
	private void enterSequence__region0_Beverage_Preparation_Third_Step_r2_Sugar_OK_default() {
		entryAction__region0_Beverage_Preparation_Third_Step_r2_Sugar_OK();
		nextStateIndex = 1;
		stateVector[1] = State._region0_Beverage_Preparation_Third_Step_r2_Sugar_OK;
	}
	
	/* 'default' enter sequence for state Take beverage */
	private void enterSequence__region0_Beverage_Preparation_Last_Step_r1_Take_beverage_default() {
		entryAction__region0_Beverage_Preparation_Last_Step_r1_Take_beverage();
		nextStateIndex = 0;
		stateVector[0] = State._region0_Beverage_Preparation_Last_Step_r1_Take_beverage;
	}
	
	/* 'default' enter sequence for state Waiting Infusion */
	private void enterSequence__region0_Beverage_Preparation_Last_Step_r1_Waiting_Infusion_default() {
		entryAction__region0_Beverage_Preparation_Last_Step_r1_Waiting_Infusion();
		nextStateIndex = 0;
		stateVector[0] = State._region0_Beverage_Preparation_Last_Step_r1_Waiting_Infusion;
	}
	
	/* 'default' enter sequence for state Remove TeaBag */
	private void enterSequence__region0_Beverage_Preparation_Last_Step_r1_Remove_TeaBag_default() {
		entryAction__region0_Beverage_Preparation_Last_Step_r1_Remove_TeaBag();
		nextStateIndex = 0;
		stateVector[0] = State._region0_Beverage_Preparation_Last_Step_r1_Remove_TeaBag;
	}
	
	/* 'default' enter sequence for state Take The Change */
	private void enterSequence__region0_Take_The_Change_default() {
		entryAction__region0_Take_The_Change();
		nextStateIndex = 0;
		stateVector[0] = State._region0_Take_The_Change;
	}
	
	/* 'default' enter sequence for state PaymentByCoins */
	private void enterSequence_PaymentByCoins_PaymentByCoins_default() {
		entryAction_PaymentByCoins_PaymentByCoins();
		nextStateIndex = 2;
		stateVector[2] = State.paymentByCoins_PaymentByCoins;
	}
	
	/* 'default' enter sequence for state WaitingCoins */
	private void enterSequence_PaymentByCoins_WaitingCoins_default() {
		entryAction_PaymentByCoins_WaitingCoins();
		nextStateIndex = 2;
		stateVector[2] = State.paymentByCoins_WaitingCoins;
	}
	
	/* 'default' enter sequence for state ReturnCoins */
	private void enterSequence_PaymentByCoins_ReturnCoins_default() {
		entryAction_PaymentByCoins_ReturnCoins();
		nextStateIndex = 2;
		stateVector[2] = State.paymentByCoins_ReturnCoins;
	}
	
	/* 'default' enter sequence for state Blocked */
	private void enterSequence_PaymentByCoins_Blocked_default() {
		entryAction_PaymentByCoins_Blocked();
		nextStateIndex = 2;
		stateVector[2] = State.paymentByCoins_Blocked;
	}
	
	/* 'default' enter sequence for state WaitingNFC */
	private void enterSequence_PaymentByNFC_WaitingNFC_default() {
		entryAction_PaymentByNFC_WaitingNFC();
		nextStateIndex = 3;
		stateVector[3] = State.paymentByNFC_WaitingNFC;
	}
	
	/* 'default' enter sequence for state PaymentByNFC */
	private void enterSequence_PaymentByNFC_PaymentByNFC_default() {
		entryAction_PaymentByNFC_PaymentByNFC();
		nextStateIndex = 3;
		stateVector[3] = State.paymentByNFC_PaymentByNFC;
	}
	
	/* 'default' enter sequence for state CancelTransaction */
	private void enterSequence_PaymentByNFC_CancelTransaction_default() {
		entryAction_PaymentByNFC_CancelTransaction();
		nextStateIndex = 3;
		stateVector[3] = State.paymentByNFC_CancelTransaction;
	}
	
	/* 'default' enter sequence for state Blocked */
	private void enterSequence_PaymentByNFC_Blocked_default() {
		entryAction_PaymentByNFC_Blocked();
		nextStateIndex = 3;
		stateVector[3] = State.paymentByNFC_Blocked;
	}
	
	/* 'default' enter sequence for region  */
	private void enterSequence__region0_default() {
		react__region0__entry_Default();
	}
	
	/* 'default' enter sequence for region PaymentByCoins */
	private void enterSequence_PaymentByCoins_default() {
		react_PaymentByCoins__entry_Default();
	}
	
	/* 'default' enter sequence for region PaymentByNFC */
	private void enterSequence_PaymentByNFC_default() {
		react_PaymentByNFC__entry_Default();
	}
	
	/* Default exit sequence for state Waiting */
	private void exitSequence__region0_Waiting() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state Cleaning */
	private void exitSequence__region0_Cleaning() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction__region0_Cleaning();
	}
	
	/* Default exit sequence for state Payment Done */
	private void exitSequence__region0_Payment_Done() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction__region0_Payment_Done();
	}
	
	/* Default exit sequence for state Beverage Choice */
	private void exitSequence__region0_Beverage_Choice() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction__region0_Beverage_Choice();
	}
	
	/* Default exit sequence for state Beverage Preparation First Step */
	private void exitSequence__region0_Beverage_Preparation_First_Step() {
		exitSequence__region0_Beverage_Preparation_First_Step_r1();
		exitSequence__region0_Beverage_Preparation_First_Step_r2();
	}
	
	/* Default exit sequence for state Start Water Heating */
	private void exitSequence__region0_Beverage_Preparation_First_Step_r1_Start_Water_Heating() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction__region0_Beverage_Preparation_First_Step_r1_Start_Water_Heating();
	}
	
	/* Default exit sequence for state Water Heating ON */
	private void exitSequence__region0_Beverage_Preparation_First_Step_r1_Water_Heating_ON() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state CoffeeSelected */
	private void exitSequence__region0_Beverage_Preparation_First_Step_r2_CoffeeSelected() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
		
		exitAction__region0_Beverage_Preparation_First_Step_r2_CoffeeSelected();
	}
	
	/* Default exit sequence for state Ready */
	private void exitSequence__region0_Beverage_Preparation_First_Step_r2_Ready() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for state TeaSelected */
	private void exitSequence__region0_Beverage_Preparation_First_Step_r2_TeaSelected() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
		
		exitAction__region0_Beverage_Preparation_First_Step_r2_TeaSelected();
	}
	
	/* Default exit sequence for state ExpressoSelected */
	private void exitSequence__region0_Beverage_Preparation_First_Step_r2_ExpressoSelected() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
		
		exitAction__region0_Beverage_Preparation_First_Step_r2_ExpressoSelected();
	}
	
	/* Default exit sequence for state Pod In Place */
	private void exitSequence__region0_Beverage_Preparation_First_Step_r2_Pod_In_Place() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for state Tea Bag In Place */
	private void exitSequence__region0_Beverage_Preparation_First_Step_r2_Tea_Bag_In_Place() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for state Grain Crushing OK */
	private void exitSequence__region0_Beverage_Preparation_First_Step_r2_Grain_Crushing_OK() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for state Beverage Preparation Second Step */
	private void exitSequence__region0_Beverage_Preparation_Second_Step() {
		exitSequence__region0_Beverage_Preparation_Second_Step_r1();
		exitSequence__region0_Beverage_Preparation_Second_Step_r2();
	}
	
	/* Default exit sequence for state Waiting Water Temperature */
	private void exitSequence__region0_Beverage_Preparation_Second_Step_r1_Waiting_Water_Temperature() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction__region0_Beverage_Preparation_Second_Step_r1_Waiting_Water_Temperature();
	}
	
	/* Default exit sequence for state Water Temperature OK */
	private void exitSequence__region0_Beverage_Preparation_Second_Step_r1_Water_Temperature_OK() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state Waiting Cup  */
	private void exitSequence__region0_Beverage_Preparation_Second_Step_r2_Waiting_Cup_() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for state Waiting Grain Pack */
	private void exitSequence__region0_Beverage_Preparation_Second_Step_r2_Waiting_Grain_Pack() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
		
		exitAction__region0_Beverage_Preparation_Second_Step_r2_Waiting_Grain_Pack();
	}
	
	/* Default exit sequence for state Cup In Place */
	private void exitSequence__region0_Beverage_Preparation_Second_Step_r2_Cup_In_Place() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for state Grain Packing OK */
	private void exitSequence__region0_Beverage_Preparation_Second_Step_r2_Grain_Packing_OK() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for state Ready2 */
	private void exitSequence__region0_Beverage_Preparation_Second_Step_r2_Ready2() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for state Own Cup OK */
	private void exitSequence__region0_Beverage_Preparation_Second_Step_r2_Own_Cup_OK() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for state Cup Need */
	private void exitSequence__region0_Beverage_Preparation_Second_Step_r2_Cup_Need() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
		
		exitAction__region0_Beverage_Preparation_Second_Step_r2_Cup_Need();
	}
	
	/* Default exit sequence for state Beverage Preparation Third Step */
	private void exitSequence__region0_Beverage_Preparation_Third_Step() {
		exitSequence__region0_Beverage_Preparation_Third_Step_r1();
		exitSequence__region0_Beverage_Preparation_Third_Step_r2();
	}
	
	/* Default exit sequence for state Start Water Flowing */
	private void exitSequence__region0_Beverage_Preparation_Third_Step_r1_Start_Water_Flowing() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction__region0_Beverage_Preparation_Third_Step_r1_Start_Water_Flowing();
	}
	
	/* Default exit sequence for state Water Flowing OK */
	private void exitSequence__region0_Beverage_Preparation_Third_Step_r1_Water_Flowing_OK() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state Add Sugar */
	private void exitSequence__region0_Beverage_Preparation_Third_Step_r2_Add_Sugar() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
		
		exitAction__region0_Beverage_Preparation_Third_Step_r2_Add_Sugar();
	}
	
	/* Default exit sequence for state Sugar OK */
	private void exitSequence__region0_Beverage_Preparation_Third_Step_r2_Sugar_OK() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for state Beverage Preparation Last Step */
	private void exitSequence__region0_Beverage_Preparation_Last_Step() {
		exitSequence__region0_Beverage_Preparation_Last_Step_r1();
	}
	
	/* Default exit sequence for state Take beverage */
	private void exitSequence__region0_Beverage_Preparation_Last_Step_r1_Take_beverage() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction__region0_Beverage_Preparation_Last_Step_r1_Take_beverage();
	}
	
	/* Default exit sequence for state Waiting Infusion */
	private void exitSequence__region0_Beverage_Preparation_Last_Step_r1_Waiting_Infusion() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction__region0_Beverage_Preparation_Last_Step_r1_Waiting_Infusion();
	}
	
	/* Default exit sequence for state Remove TeaBag */
	private void exitSequence__region0_Beverage_Preparation_Last_Step_r1_Remove_TeaBag() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction__region0_Beverage_Preparation_Last_Step_r1_Remove_TeaBag();
	}
	
	/* Default exit sequence for state Take The Change */
	private void exitSequence__region0_Take_The_Change() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction__region0_Take_The_Change();
	}
	
	/* Default exit sequence for state PaymentByCoins */
	private void exitSequence_PaymentByCoins_PaymentByCoins() {
		nextStateIndex = 2;
		stateVector[2] = State.$NullState$;
		
		exitAction_PaymentByCoins_PaymentByCoins();
	}
	
	/* Default exit sequence for state WaitingCoins */
	private void exitSequence_PaymentByCoins_WaitingCoins() {
		nextStateIndex = 2;
		stateVector[2] = State.$NullState$;
		
		exitAction_PaymentByCoins_WaitingCoins();
	}
	
	/* Default exit sequence for state ReturnCoins */
	private void exitSequence_PaymentByCoins_ReturnCoins() {
		nextStateIndex = 2;
		stateVector[2] = State.$NullState$;
		
		exitAction_PaymentByCoins_ReturnCoins();
	}
	
	/* Default exit sequence for state Blocked */
	private void exitSequence_PaymentByCoins_Blocked() {
		nextStateIndex = 2;
		stateVector[2] = State.$NullState$;
		
		exitAction_PaymentByCoins_Blocked();
	}
	
	/* Default exit sequence for state WaitingNFC */
	private void exitSequence_PaymentByNFC_WaitingNFC() {
		nextStateIndex = 3;
		stateVector[3] = State.$NullState$;
		
		exitAction_PaymentByNFC_WaitingNFC();
	}
	
	/* Default exit sequence for state PaymentByNFC */
	private void exitSequence_PaymentByNFC_PaymentByNFC() {
		nextStateIndex = 3;
		stateVector[3] = State.$NullState$;
		
		exitAction_PaymentByNFC_PaymentByNFC();
	}
	
	/* Default exit sequence for state CancelTransaction */
	private void exitSequence_PaymentByNFC_CancelTransaction() {
		nextStateIndex = 3;
		stateVector[3] = State.$NullState$;
		
		exitAction_PaymentByNFC_CancelTransaction();
	}
	
	/* Default exit sequence for state Blocked */
	private void exitSequence_PaymentByNFC_Blocked() {
		nextStateIndex = 3;
		stateVector[3] = State.$NullState$;
		
		exitAction_PaymentByNFC_Blocked();
	}
	
	/* Default exit sequence for region  */
	private void exitSequence__region0() {
		switch (stateVector[0]) {
		case _region0_Waiting:
			exitSequence__region0_Waiting();
			break;
		case _region0_Cleaning:
			exitSequence__region0_Cleaning();
			break;
		case _region0_Payment_Done:
			exitSequence__region0_Payment_Done();
			break;
		case _region0_Beverage_Choice:
			exitSequence__region0_Beverage_Choice();
			break;
		case _region0_Beverage_Preparation_First_Step_r1_Start_Water_Heating:
			exitSequence__region0_Beverage_Preparation_First_Step_r1_Start_Water_Heating();
			break;
		case _region0_Beverage_Preparation_First_Step_r1_Water_Heating_ON:
			exitSequence__region0_Beverage_Preparation_First_Step_r1_Water_Heating_ON();
			break;
		case _region0_Beverage_Preparation_Second_Step_r1_Waiting_Water_Temperature:
			exitSequence__region0_Beverage_Preparation_Second_Step_r1_Waiting_Water_Temperature();
			break;
		case _region0_Beverage_Preparation_Second_Step_r1_Water_Temperature_OK:
			exitSequence__region0_Beverage_Preparation_Second_Step_r1_Water_Temperature_OK();
			break;
		case _region0_Beverage_Preparation_Third_Step_r1_Start_Water_Flowing:
			exitSequence__region0_Beverage_Preparation_Third_Step_r1_Start_Water_Flowing();
			break;
		case _region0_Beverage_Preparation_Third_Step_r1_Water_Flowing_OK:
			exitSequence__region0_Beverage_Preparation_Third_Step_r1_Water_Flowing_OK();
			break;
		case _region0_Beverage_Preparation_Last_Step_r1_Take_beverage:
			exitSequence__region0_Beverage_Preparation_Last_Step_r1_Take_beverage();
			break;
		case _region0_Beverage_Preparation_Last_Step_r1_Waiting_Infusion:
			exitSequence__region0_Beverage_Preparation_Last_Step_r1_Waiting_Infusion();
			break;
		case _region0_Beverage_Preparation_Last_Step_r1_Remove_TeaBag:
			exitSequence__region0_Beverage_Preparation_Last_Step_r1_Remove_TeaBag();
			break;
		case _region0_Take_The_Change:
			exitSequence__region0_Take_The_Change();
			break;
		default:
			break;
		}
		
		switch (stateVector[1]) {
		case _region0_Beverage_Preparation_First_Step_r2_CoffeeSelected:
			exitSequence__region0_Beverage_Preparation_First_Step_r2_CoffeeSelected();
			break;
		case _region0_Beverage_Preparation_First_Step_r2_Ready:
			exitSequence__region0_Beverage_Preparation_First_Step_r2_Ready();
			break;
		case _region0_Beverage_Preparation_First_Step_r2_TeaSelected:
			exitSequence__region0_Beverage_Preparation_First_Step_r2_TeaSelected();
			break;
		case _region0_Beverage_Preparation_First_Step_r2_ExpressoSelected:
			exitSequence__region0_Beverage_Preparation_First_Step_r2_ExpressoSelected();
			break;
		case _region0_Beverage_Preparation_First_Step_r2_Pod_In_Place:
			exitSequence__region0_Beverage_Preparation_First_Step_r2_Pod_In_Place();
			break;
		case _region0_Beverage_Preparation_First_Step_r2_Tea_Bag_In_Place:
			exitSequence__region0_Beverage_Preparation_First_Step_r2_Tea_Bag_In_Place();
			break;
		case _region0_Beverage_Preparation_First_Step_r2_Grain_Crushing_OK:
			exitSequence__region0_Beverage_Preparation_First_Step_r2_Grain_Crushing_OK();
			break;
		case _region0_Beverage_Preparation_Second_Step_r2_Waiting_Cup_:
			exitSequence__region0_Beverage_Preparation_Second_Step_r2_Waiting_Cup_();
			break;
		case _region0_Beverage_Preparation_Second_Step_r2_Waiting_Grain_Pack:
			exitSequence__region0_Beverage_Preparation_Second_Step_r2_Waiting_Grain_Pack();
			break;
		case _region0_Beverage_Preparation_Second_Step_r2_Cup_In_Place:
			exitSequence__region0_Beverage_Preparation_Second_Step_r2_Cup_In_Place();
			break;
		case _region0_Beverage_Preparation_Second_Step_r2_Grain_Packing_OK:
			exitSequence__region0_Beverage_Preparation_Second_Step_r2_Grain_Packing_OK();
			break;
		case _region0_Beverage_Preparation_Second_Step_r2_Ready2:
			exitSequence__region0_Beverage_Preparation_Second_Step_r2_Ready2();
			break;
		case _region0_Beverage_Preparation_Second_Step_r2_Own_Cup_OK:
			exitSequence__region0_Beverage_Preparation_Second_Step_r2_Own_Cup_OK();
			break;
		case _region0_Beverage_Preparation_Second_Step_r2_Cup_Need:
			exitSequence__region0_Beverage_Preparation_Second_Step_r2_Cup_Need();
			break;
		case _region0_Beverage_Preparation_Third_Step_r2_Add_Sugar:
			exitSequence__region0_Beverage_Preparation_Third_Step_r2_Add_Sugar();
			break;
		case _region0_Beverage_Preparation_Third_Step_r2_Sugar_OK:
			exitSequence__region0_Beverage_Preparation_Third_Step_r2_Sugar_OK();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence__region0_Beverage_Preparation_First_Step_r1() {
		switch (stateVector[0]) {
		case _region0_Beverage_Preparation_First_Step_r1_Start_Water_Heating:
			exitSequence__region0_Beverage_Preparation_First_Step_r1_Start_Water_Heating();
			break;
		case _region0_Beverage_Preparation_First_Step_r1_Water_Heating_ON:
			exitSequence__region0_Beverage_Preparation_First_Step_r1_Water_Heating_ON();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r2 */
	private void exitSequence__region0_Beverage_Preparation_First_Step_r2() {
		switch (stateVector[1]) {
		case _region0_Beverage_Preparation_First_Step_r2_CoffeeSelected:
			exitSequence__region0_Beverage_Preparation_First_Step_r2_CoffeeSelected();
			break;
		case _region0_Beverage_Preparation_First_Step_r2_Ready:
			exitSequence__region0_Beverage_Preparation_First_Step_r2_Ready();
			break;
		case _region0_Beverage_Preparation_First_Step_r2_TeaSelected:
			exitSequence__region0_Beverage_Preparation_First_Step_r2_TeaSelected();
			break;
		case _region0_Beverage_Preparation_First_Step_r2_ExpressoSelected:
			exitSequence__region0_Beverage_Preparation_First_Step_r2_ExpressoSelected();
			break;
		case _region0_Beverage_Preparation_First_Step_r2_Pod_In_Place:
			exitSequence__region0_Beverage_Preparation_First_Step_r2_Pod_In_Place();
			break;
		case _region0_Beverage_Preparation_First_Step_r2_Tea_Bag_In_Place:
			exitSequence__region0_Beverage_Preparation_First_Step_r2_Tea_Bag_In_Place();
			break;
		case _region0_Beverage_Preparation_First_Step_r2_Grain_Crushing_OK:
			exitSequence__region0_Beverage_Preparation_First_Step_r2_Grain_Crushing_OK();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence__region0_Beverage_Preparation_Second_Step_r1() {
		switch (stateVector[0]) {
		case _region0_Beverage_Preparation_Second_Step_r1_Waiting_Water_Temperature:
			exitSequence__region0_Beverage_Preparation_Second_Step_r1_Waiting_Water_Temperature();
			break;
		case _region0_Beverage_Preparation_Second_Step_r1_Water_Temperature_OK:
			exitSequence__region0_Beverage_Preparation_Second_Step_r1_Water_Temperature_OK();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r2 */
	private void exitSequence__region0_Beverage_Preparation_Second_Step_r2() {
		switch (stateVector[1]) {
		case _region0_Beverage_Preparation_Second_Step_r2_Waiting_Cup_:
			exitSequence__region0_Beverage_Preparation_Second_Step_r2_Waiting_Cup_();
			break;
		case _region0_Beverage_Preparation_Second_Step_r2_Waiting_Grain_Pack:
			exitSequence__region0_Beverage_Preparation_Second_Step_r2_Waiting_Grain_Pack();
			break;
		case _region0_Beverage_Preparation_Second_Step_r2_Cup_In_Place:
			exitSequence__region0_Beverage_Preparation_Second_Step_r2_Cup_In_Place();
			break;
		case _region0_Beverage_Preparation_Second_Step_r2_Grain_Packing_OK:
			exitSequence__region0_Beverage_Preparation_Second_Step_r2_Grain_Packing_OK();
			break;
		case _region0_Beverage_Preparation_Second_Step_r2_Ready2:
			exitSequence__region0_Beverage_Preparation_Second_Step_r2_Ready2();
			break;
		case _region0_Beverage_Preparation_Second_Step_r2_Own_Cup_OK:
			exitSequence__region0_Beverage_Preparation_Second_Step_r2_Own_Cup_OK();
			break;
		case _region0_Beverage_Preparation_Second_Step_r2_Cup_Need:
			exitSequence__region0_Beverage_Preparation_Second_Step_r2_Cup_Need();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence__region0_Beverage_Preparation_Third_Step_r1() {
		switch (stateVector[0]) {
		case _region0_Beverage_Preparation_Third_Step_r1_Start_Water_Flowing:
			exitSequence__region0_Beverage_Preparation_Third_Step_r1_Start_Water_Flowing();
			break;
		case _region0_Beverage_Preparation_Third_Step_r1_Water_Flowing_OK:
			exitSequence__region0_Beverage_Preparation_Third_Step_r1_Water_Flowing_OK();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r2 */
	private void exitSequence__region0_Beverage_Preparation_Third_Step_r2() {
		switch (stateVector[1]) {
		case _region0_Beverage_Preparation_Third_Step_r2_Add_Sugar:
			exitSequence__region0_Beverage_Preparation_Third_Step_r2_Add_Sugar();
			break;
		case _region0_Beverage_Preparation_Third_Step_r2_Sugar_OK:
			exitSequence__region0_Beverage_Preparation_Third_Step_r2_Sugar_OK();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence__region0_Beverage_Preparation_Last_Step_r1() {
		switch (stateVector[0]) {
		case _region0_Beverage_Preparation_Last_Step_r1_Take_beverage:
			exitSequence__region0_Beverage_Preparation_Last_Step_r1_Take_beverage();
			break;
		case _region0_Beverage_Preparation_Last_Step_r1_Waiting_Infusion:
			exitSequence__region0_Beverage_Preparation_Last_Step_r1_Waiting_Infusion();
			break;
		case _region0_Beverage_Preparation_Last_Step_r1_Remove_TeaBag:
			exitSequence__region0_Beverage_Preparation_Last_Step_r1_Remove_TeaBag();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region PaymentByCoins */
	private void exitSequence_PaymentByCoins() {
		switch (stateVector[2]) {
		case paymentByCoins_PaymentByCoins:
			exitSequence_PaymentByCoins_PaymentByCoins();
			break;
		case paymentByCoins_WaitingCoins:
			exitSequence_PaymentByCoins_WaitingCoins();
			break;
		case paymentByCoins_ReturnCoins:
			exitSequence_PaymentByCoins_ReturnCoins();
			break;
		case paymentByCoins_Blocked:
			exitSequence_PaymentByCoins_Blocked();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region PaymentByNFC */
	private void exitSequence_PaymentByNFC() {
		switch (stateVector[3]) {
		case paymentByNFC_WaitingNFC:
			exitSequence_PaymentByNFC_WaitingNFC();
			break;
		case paymentByNFC_PaymentByNFC:
			exitSequence_PaymentByNFC_PaymentByNFC();
			break;
		case paymentByNFC_CancelTransaction:
			exitSequence_PaymentByNFC_CancelTransaction();
			break;
		case paymentByNFC_Blocked:
			exitSequence_PaymentByNFC_Blocked();
			break;
		default:
			break;
		}
	}
	
	/* The reactions of state null. */
	private void react__region0_Beverage_Preparation_First_Step_r2__choice_0() {
		if (check__region0_Beverage_Preparation_First_Step_r2__choice_0_tr0_tr0()) {
			effect__region0_Beverage_Preparation_First_Step_r2__choice_0_tr0();
		} else {
			if (check__region0_Beverage_Preparation_First_Step_r2__choice_0_tr1_tr1()) {
				effect__region0_Beverage_Preparation_First_Step_r2__choice_0_tr1();
			} else {
				effect__region0_Beverage_Preparation_First_Step_r2__choice_0_tr2();
			}
		}
	}
	
	/* The reactions of state null. */
	private void react__region0_Beverage_Preparation_Second_Step_r2__choice_0() {
		if (check__region0_Beverage_Preparation_Second_Step_r2__choice_0_tr0_tr0()) {
			effect__region0_Beverage_Preparation_Second_Step_r2__choice_0_tr0();
		} else {
			effect__region0_Beverage_Preparation_Second_Step_r2__choice_0_tr1();
		}
	}
	
	/* The reactions of state null. */
	private void react__region0_Beverage_Preparation_Second_Step_r2__choice_1() {
		if (check__region0_Beverage_Preparation_Second_Step_r2__choice_1_tr0_tr0()) {
			effect__region0_Beverage_Preparation_Second_Step_r2__choice_1_tr0();
		} else {
			effect__region0_Beverage_Preparation_Second_Step_r2__choice_1_tr1();
		}
	}
	
	/* The reactions of state null. */
	private void react__region0_Beverage_Preparation_Last_Step_r1__choice_0() {
		if (check__region0_Beverage_Preparation_Last_Step_r1__choice_0_tr0_tr0()) {
			effect__region0_Beverage_Preparation_Last_Step_r1__choice_0_tr0();
		} else {
			effect__region0_Beverage_Preparation_Last_Step_r1__choice_0_tr1();
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react__region0__entry_Default() {
		enterSequence__region0_Waiting_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_PaymentByCoins__entry_Default() {
		enterSequence_PaymentByCoins_WaitingCoins_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_PaymentByNFC__entry_Default() {
		enterSequence_PaymentByNFC_WaitingNFC_default();
	}
	
	/* The reactions of state null. */
	private void react__region0__sync0() {
		enterSequence__region0_Beverage_Preparation_First_Step_r1_Start_Water_Heating_default();
		react__region0_Beverage_Preparation_First_Step_r2__choice_0();
	}
	
	/* The reactions of state null. */
	private void react__region0__sync1() {
		enterSequence__region0_Beverage_Preparation_Third_Step_r1_Start_Water_Flowing_default();
		enterSequence__region0_Beverage_Preparation_Third_Step_r2_Add_Sugar_default();
	}
	
	/* The reactions of state null. */
	private void react__region0__sync2() {
		enterSequence__region0_Beverage_Preparation_Second_Step_r1_Waiting_Water_Temperature_default();
		enterSequence__region0_Beverage_Preparation_Second_Step_r2_Waiting_Cup__default();
	}
	
	/* The reactions of state null. */
	private void react__region0__sync3() {
		react__region0_Beverage_Preparation_Last_Step_r1__choice_0();
	}
	
	private boolean react() {
		return false;
	}
	
	private boolean _region0_Waiting_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if ((sCInterface.coffeeButton || (sCInterface.expressoButton || sCInterface.teaButton))) {
				exitSequence__region0_Waiting();
				sCInterface.raiseBeverageChoice();
				
				enterSequence__region0_Beverage_Choice_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean _region0_Cleaning_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[0]) {
				exitSequence__region0_Cleaning();
				enterSequence__region0_Waiting_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean _region0_Payment_Done_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[1]) {
				exitSequence__region0_Payment_Done();
				sCInterface.raiseBeveragePreparation();
				
				react__region0__sync0();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean _region0_Beverage_Choice_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((sCInterface.getPaymentCard() || sCInterface.getEnoughMoney()))==true) {
				exitSequence__region0_Beverage_Choice();
				sCInterface.raiseValidatePayment();
				
				enterSequence__region0_Payment_Done_default();
			} else {
				if (sCInterface.cancelButton) {
					exitSequence__region0_Beverage_Choice();
					enterSequence__region0_Waiting_default();
				} else {
					if (timeEvents[2]) {
						exitSequence__region0_Beverage_Choice();
						enterSequence__region0_Waiting_default();
					} else {
						if ((sCInterface.coffeeButton || (sCInterface.expressoButton || (sCInterface.teaButton || (sCInterface.money50centsButton || (sCInterface.money25centsButton || (sCInterface.money10centsButton || sCInterface.addCupButton))))))) {
							exitSequence__region0_Beverage_Choice();
							sCInterface.raiseBeverageChoice();
							
							enterSequence__region0_Beverage_Choice_default();
						} else {
							did_transition = false;
						}
					}
				}
			}
		}
		return did_transition;
	}
	
	private boolean _region0_Beverage_Preparation_First_Step_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		return did_transition;
	}
	
	private boolean _region0_Beverage_Preparation_First_Step_r1_Start_Water_Heating_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[3]) {
				exitSequence__region0_Beverage_Preparation_First_Step_r1_Start_Water_Heating();
				enterSequence__region0_Beverage_Preparation_First_Step_r1_Water_Heating_ON_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean _region0_Beverage_Preparation_First_Step_r1_Water_Heating_ON_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((true && isStateActive(State._region0_Beverage_Preparation_First_Step_r2_Ready)) && true)) {
				exitSequence__region0_Beverage_Preparation_First_Step();
				react__region0__sync2();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean _region0_Beverage_Preparation_First_Step_r2_CoffeeSelected_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[4]) {
				exitSequence__region0_Beverage_Preparation_First_Step_r2_CoffeeSelected();
				enterSequence__region0_Beverage_Preparation_First_Step_r2_Pod_In_Place_default();
				_region0_Beverage_Preparation_First_Step_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = _region0_Beverage_Preparation_First_Step_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean _region0_Beverage_Preparation_First_Step_r2_Ready_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((true && isStateActive(State._region0_Beverage_Preparation_First_Step_r1_Water_Heating_ON)) && true)) {
				exitSequence__region0_Beverage_Preparation_First_Step();
				react__region0__sync2();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = _region0_Beverage_Preparation_First_Step_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean _region0_Beverage_Preparation_First_Step_r2_TeaSelected_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[5]) {
				exitSequence__region0_Beverage_Preparation_First_Step_r2_TeaSelected();
				enterSequence__region0_Beverage_Preparation_First_Step_r2_Tea_Bag_In_Place_default();
				_region0_Beverage_Preparation_First_Step_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = _region0_Beverage_Preparation_First_Step_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean _region0_Beverage_Preparation_First_Step_r2_ExpressoSelected_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[6]) {
				exitSequence__region0_Beverage_Preparation_First_Step_r2_ExpressoSelected();
				enterSequence__region0_Beverage_Preparation_First_Step_r2_Grain_Crushing_OK_default();
				_region0_Beverage_Preparation_First_Step_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = _region0_Beverage_Preparation_First_Step_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean _region0_Beverage_Preparation_First_Step_r2_Pod_In_Place_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			exitSequence__region0_Beverage_Preparation_First_Step_r2_Pod_In_Place();
			enterSequence__region0_Beverage_Preparation_First_Step_r2_Ready_default();
			_region0_Beverage_Preparation_First_Step_react(false);
		}
		if (did_transition==false) {
			did_transition = _region0_Beverage_Preparation_First_Step_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean _region0_Beverage_Preparation_First_Step_r2_Tea_Bag_In_Place_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			exitSequence__region0_Beverage_Preparation_First_Step_r2_Tea_Bag_In_Place();
			enterSequence__region0_Beverage_Preparation_First_Step_r2_Ready_default();
			_region0_Beverage_Preparation_First_Step_react(false);
		}
		if (did_transition==false) {
			did_transition = _region0_Beverage_Preparation_First_Step_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean _region0_Beverage_Preparation_First_Step_r2_Grain_Crushing_OK_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			exitSequence__region0_Beverage_Preparation_First_Step_r2_Grain_Crushing_OK();
			enterSequence__region0_Beverage_Preparation_First_Step_r2_Ready_default();
			_region0_Beverage_Preparation_First_Step_react(false);
		}
		if (did_transition==false) {
			did_transition = _region0_Beverage_Preparation_First_Step_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean _region0_Beverage_Preparation_Second_Step_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		return did_transition;
	}
	
	private boolean _region0_Beverage_Preparation_Second_Step_r1_Waiting_Water_Temperature_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[7]) {
				exitSequence__region0_Beverage_Preparation_Second_Step_r1_Waiting_Water_Temperature();
				enterSequence__region0_Beverage_Preparation_Second_Step_r1_Water_Temperature_OK_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean _region0_Beverage_Preparation_Second_Step_r1_Water_Temperature_OK_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((true && isStateActive(State._region0_Beverage_Preparation_Second_Step_r2_Ready2)) && true)) {
				exitSequence__region0_Beverage_Preparation_Second_Step();
				react__region0__sync1();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean _region0_Beverage_Preparation_Second_Step_r2_Waiting_Cup__react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			exitSequence__region0_Beverage_Preparation_Second_Step_r2_Waiting_Cup_();
			react__region0_Beverage_Preparation_Second_Step_r2__choice_1();
		}
		if (did_transition==false) {
			did_transition = _region0_Beverage_Preparation_Second_Step_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean _region0_Beverage_Preparation_Second_Step_r2_Waiting_Grain_Pack_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[8]) {
				exitSequence__region0_Beverage_Preparation_Second_Step_r2_Waiting_Grain_Pack();
				enterSequence__region0_Beverage_Preparation_Second_Step_r2_Grain_Packing_OK_default();
				_region0_Beverage_Preparation_Second_Step_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = _region0_Beverage_Preparation_Second_Step_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean _region0_Beverage_Preparation_Second_Step_r2_Cup_In_Place_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			exitSequence__region0_Beverage_Preparation_Second_Step_r2_Cup_In_Place();
			react__region0_Beverage_Preparation_Second_Step_r2__choice_0();
		}
		if (did_transition==false) {
			did_transition = _region0_Beverage_Preparation_Second_Step_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean _region0_Beverage_Preparation_Second_Step_r2_Grain_Packing_OK_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			exitSequence__region0_Beverage_Preparation_Second_Step_r2_Grain_Packing_OK();
			enterSequence__region0_Beverage_Preparation_Second_Step_r2_Ready2_default();
			_region0_Beverage_Preparation_Second_Step_react(false);
		}
		if (did_transition==false) {
			did_transition = _region0_Beverage_Preparation_Second_Step_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean _region0_Beverage_Preparation_Second_Step_r2_Ready2_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((true && isStateActive(State._region0_Beverage_Preparation_Second_Step_r1_Water_Temperature_OK)) && true)) {
				exitSequence__region0_Beverage_Preparation_Second_Step();
				react__region0__sync1();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = _region0_Beverage_Preparation_Second_Step_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean _region0_Beverage_Preparation_Second_Step_r2_Own_Cup_OK_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			exitSequence__region0_Beverage_Preparation_Second_Step_r2_Own_Cup_OK();
			react__region0_Beverage_Preparation_Second_Step_r2__choice_0();
		}
		if (did_transition==false) {
			did_transition = _region0_Beverage_Preparation_Second_Step_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean _region0_Beverage_Preparation_Second_Step_r2_Cup_Need_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[9]) {
				exitSequence__region0_Beverage_Preparation_Second_Step_r2_Cup_Need();
				enterSequence__region0_Beverage_Preparation_Second_Step_r2_Cup_In_Place_default();
				_region0_Beverage_Preparation_Second_Step_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = _region0_Beverage_Preparation_Second_Step_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean _region0_Beverage_Preparation_Third_Step_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		return did_transition;
	}
	
	private boolean _region0_Beverage_Preparation_Third_Step_r1_Start_Water_Flowing_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[10]) {
				exitSequence__region0_Beverage_Preparation_Third_Step_r1_Start_Water_Flowing();
				enterSequence__region0_Beverage_Preparation_Third_Step_r1_Water_Flowing_OK_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean _region0_Beverage_Preparation_Third_Step_r1_Water_Flowing_OK_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (isStateActive(State._region0_Beverage_Preparation_Third_Step_r2_Sugar_OK)) {
				exitSequence__region0_Beverage_Preparation_Third_Step();
				react__region0__sync3();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean _region0_Beverage_Preparation_Third_Step_r2_Add_Sugar_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[11]) {
				exitSequence__region0_Beverage_Preparation_Third_Step_r2_Add_Sugar();
				enterSequence__region0_Beverage_Preparation_Third_Step_r2_Sugar_OK_default();
				_region0_Beverage_Preparation_Third_Step_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = _region0_Beverage_Preparation_Third_Step_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean _region0_Beverage_Preparation_Third_Step_r2_Sugar_OK_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (isStateActive(State._region0_Beverage_Preparation_Third_Step_r1_Water_Flowing_OK)) {
				exitSequence__region0_Beverage_Preparation_Third_Step();
				react__region0__sync3();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = _region0_Beverage_Preparation_Third_Step_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean _region0_Beverage_Preparation_Last_Step_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		return did_transition;
	}
	
	private boolean _region0_Beverage_Preparation_Last_Step_r1_Take_beverage_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[12]) {
				exitSequence__region0_Beverage_Preparation_Last_Step();
				enterSequence__region0_Take_The_Change_default();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = _region0_Beverage_Preparation_Last_Step_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean _region0_Beverage_Preparation_Last_Step_r1_Waiting_Infusion_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[13]) {
				exitSequence__region0_Beverage_Preparation_Last_Step_r1_Waiting_Infusion();
				enterSequence__region0_Beverage_Preparation_Last_Step_r1_Remove_TeaBag_default();
				_region0_Beverage_Preparation_Last_Step_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = _region0_Beverage_Preparation_Last_Step_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean _region0_Beverage_Preparation_Last_Step_r1_Remove_TeaBag_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[14]) {
				exitSequence__region0_Beverage_Preparation_Last_Step_r1_Remove_TeaBag();
				enterSequence__region0_Beverage_Preparation_Last_Step_r1_Take_beverage_default();
				_region0_Beverage_Preparation_Last_Step_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = _region0_Beverage_Preparation_Last_Step_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean _region0_Take_The_Change_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[15]) {
				exitSequence__region0_Take_The_Change();
				sCInterface.raiseCleaningMachine();
				
				enterSequence__region0_Cleaning_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean paymentByCoins_PaymentByCoins_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if ((sCInterface.money50centsButton || (sCInterface.money25centsButton || (sCInterface.money10centsButton || (sCInterface.coffeeButton || (sCInterface.expressoButton || sCInterface.teaButton)))))) {
				exitSequence_PaymentByCoins_PaymentByCoins();
				sCInterface.raiseUpdateSolde();
				
				enterSequence_PaymentByCoins_PaymentByCoins_default();
			} else {
				if (timeEvents[16]) {
					exitSequence_PaymentByCoins_PaymentByCoins();
					sCInterface.raiseCancelPreparation();
					
					enterSequence_PaymentByCoins_ReturnCoins_default();
				} else {
					if (sCInterface.cancelButton) {
						exitSequence_PaymentByCoins_PaymentByCoins();
						sCInterface.raiseCancelPreparation();
						
						enterSequence_PaymentByCoins_ReturnCoins_default();
					} else {
						if (sCInterface.getPaymentDone()==true) {
							exitSequence_PaymentByCoins_PaymentByCoins();
							enterSequence_PaymentByCoins_WaitingCoins_default();
						} else {
							did_transition = false;
						}
					}
				}
			}
		}
		return did_transition;
	}
	
	private boolean paymentByCoins_WaitingCoins_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if ((sCInterface.money50centsButton || (sCInterface.money25centsButton || sCInterface.money10centsButton))) {
				exitSequence_PaymentByCoins_WaitingCoins();
				sCInterface.raiseUpdateSolde();
				
				enterSequence_PaymentByCoins_PaymentByCoins_default();
			} else {
				if (((timeEvents[17]) && (sCInterface.getOnWire()==false))) {
					exitSequence_PaymentByCoins_WaitingCoins();
					enterSequence_PaymentByCoins_Blocked_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean paymentByCoins_ReturnCoins_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[18]) {
				exitSequence_PaymentByCoins_ReturnCoins();
				sCInterface.raiseMachineReady();
				
				enterSequence_PaymentByCoins_WaitingCoins_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean paymentByCoins_Blocked_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((timeEvents[19]) && (sCInterface.getOnWire()==true))) {
				exitSequence_PaymentByCoins_Blocked();
				enterSequence_PaymentByCoins_WaitingCoins_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean paymentByNFC_WaitingNFC_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.bipButton) {
				exitSequence_PaymentByNFC_WaitingNFC();
				sCInterface.raisePayByNFC();
				
				enterSequence_PaymentByNFC_PaymentByNFC_default();
				react();
			} else {
				if (((timeEvents[20]) && (sCInterface.getOnWire()==false))) {
					exitSequence_PaymentByNFC_WaitingNFC();
					enterSequence_PaymentByNFC_Blocked_default();
					react();
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean paymentByNFC_PaymentByNFC_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[21]) {
				exitSequence_PaymentByNFC_PaymentByNFC();
				sCInterface.raiseCancelTransaction();
				
				enterSequence_PaymentByNFC_CancelTransaction_default();
				react();
			} else {
				if (sCInterface.cancelButton) {
					exitSequence_PaymentByNFC_PaymentByNFC();
					sCInterface.raiseCancelTransaction();
					
					enterSequence_PaymentByNFC_CancelTransaction_default();
					react();
				} else {
					if (((timeEvents[22]) && (sCInterface.getPaymentDone()==true))) {
						exitSequence_PaymentByNFC_PaymentByNFC();
						enterSequence_PaymentByNFC_WaitingNFC_default();
						react();
					} else {
						did_transition = false;
					}
				}
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean paymentByNFC_CancelTransaction_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[23]) {
				exitSequence_PaymentByNFC_CancelTransaction();
				sCInterface.raiseMachineReady();
				
				enterSequence_PaymentByNFC_WaitingNFC_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean paymentByNFC_Blocked_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((timeEvents[24]) && (sCInterface.getOnWire()==true))) {
				exitSequence_PaymentByNFC_Blocked();
				enterSequence_PaymentByNFC_WaitingNFC_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
}
