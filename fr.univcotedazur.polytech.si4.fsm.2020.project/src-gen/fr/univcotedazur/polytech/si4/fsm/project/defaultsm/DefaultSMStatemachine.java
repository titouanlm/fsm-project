/** Generated by YAKINDU Statechart Tools code generator. */
package fr.univcotedazur.polytech.si4.fsm.project.defaultsm;

import fr.univcotedazur.polytech.si4.fsm.project.ITimer;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

public class DefaultSMStatemachine implements IDefaultSMStatemachine {
	protected class SCInterfaceImpl implements SCInterface {
	
		private List<SCInterfaceListener> listeners = new LinkedList<SCInterfaceListener>();
		
		public List<SCInterfaceListener> getListeners() {
			return listeners;
		}
		private boolean money50centsButton;
		
		
		public void raiseMoney50centsButton() {
			synchronized(DefaultSMStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							money50centsButton = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean money25centsButton;
		
		
		public void raiseMoney25centsButton() {
			synchronized(DefaultSMStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							money25centsButton = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean money10centsButton;
		
		
		public void raiseMoney10centsButton() {
			synchronized(DefaultSMStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							money10centsButton = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean coffeeButton;
		
		
		public void raiseCoffeeButton() {
			synchronized(DefaultSMStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							coffeeButton = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean teaButton;
		
		
		public void raiseTeaButton() {
			synchronized(DefaultSMStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							teaButton = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean expressoButton;
		
		
		public void raiseExpressoButton() {
			synchronized(DefaultSMStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							expressoButton = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean soupButton;
		
		
		public void raiseSoupButton() {
			synchronized(DefaultSMStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							soupButton = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean cancelButton;
		
		
		public void raiseCancelButton() {
			synchronized(DefaultSMStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							cancelButton = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean icedTeaButton;
		
		
		public void raiseIcedTeaButton() {
			synchronized(DefaultSMStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							icedTeaButton = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean updateSolde;
		
		
		public boolean isRaisedUpdateSolde() {
			synchronized(DefaultSMStatemachine.this) {
				return updateSolde;
			}
		}
		
		protected void raiseUpdateSolde() {
			synchronized(DefaultSMStatemachine.this) {
				updateSolde = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onUpdateSoldeRaised();
				}
			}
		}
		
		private boolean resetSolde;
		
		
		public boolean isRaisedResetSolde() {
			synchronized(DefaultSMStatemachine.this) {
				return resetSolde;
			}
		}
		
		protected void raiseResetSolde() {
			synchronized(DefaultSMStatemachine.this) {
				resetSolde = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onResetSoldeRaised();
				}
			}
		}
		
		private boolean takeBeverage;
		
		
		public boolean isRaisedTakeBeverage() {
			synchronized(DefaultSMStatemachine.this) {
				return takeBeverage;
			}
		}
		
		protected void raiseTakeBeverage() {
			synchronized(DefaultSMStatemachine.this) {
				takeBeverage = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onTakeBeverageRaised();
				}
			}
		}
		
		private boolean cleaningMachine;
		
		
		public boolean isRaisedCleaningMachine() {
			synchronized(DefaultSMStatemachine.this) {
				return cleaningMachine;
			}
		}
		
		protected void raiseCleaningMachine() {
			synchronized(DefaultSMStatemachine.this) {
				cleaningMachine = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onCleaningMachineRaised();
				}
			}
		}
		
		private boolean machineReady;
		
		
		public boolean isRaisedMachineReady() {
			synchronized(DefaultSMStatemachine.this) {
				return machineReady;
			}
		}
		
		protected void raiseMachineReady() {
			synchronized(DefaultSMStatemachine.this) {
				machineReady = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onMachineReadyRaised();
				}
			}
		}
		
		private boolean makeCoffee;
		
		
		public boolean isRaisedMakeCoffee() {
			synchronized(DefaultSMStatemachine.this) {
				return makeCoffee;
			}
		}
		
		protected void raiseMakeCoffee() {
			synchronized(DefaultSMStatemachine.this) {
				makeCoffee = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onMakeCoffeeRaised();
				}
			}
		}
		
		private boolean makeTea;
		
		
		public boolean isRaisedMakeTea() {
			synchronized(DefaultSMStatemachine.this) {
				return makeTea;
			}
		}
		
		protected void raiseMakeTea() {
			synchronized(DefaultSMStatemachine.this) {
				makeTea = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onMakeTeaRaised();
				}
			}
		}
		
		private boolean makeExpresso;
		
		
		public boolean isRaisedMakeExpresso() {
			synchronized(DefaultSMStatemachine.this) {
				return makeExpresso;
			}
		}
		
		protected void raiseMakeExpresso() {
			synchronized(DefaultSMStatemachine.this) {
				makeExpresso = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onMakeExpressoRaised();
				}
			}
		}
		
		private boolean makeSoup;
		
		
		public boolean isRaisedMakeSoup() {
			synchronized(DefaultSMStatemachine.this) {
				return makeSoup;
			}
		}
		
		protected void raiseMakeSoup() {
			synchronized(DefaultSMStatemachine.this) {
				makeSoup = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onMakeSoupRaised();
				}
			}
		}
		
		private boolean makeIcedTea;
		
		
		public boolean isRaisedMakeIcedTea() {
			synchronized(DefaultSMStatemachine.this) {
				return makeIcedTea;
			}
		}
		
		protected void raiseMakeIcedTea() {
			synchronized(DefaultSMStatemachine.this) {
				makeIcedTea = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onMakeIcedTeaRaised();
				}
			}
		}
		
		private boolean cancelPreparation;
		
		
		public boolean isRaisedCancelPreparation() {
			synchronized(DefaultSMStatemachine.this) {
				return cancelPreparation;
			}
		}
		
		protected void raiseCancelPreparation() {
			synchronized(DefaultSMStatemachine.this) {
				cancelPreparation = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onCancelPreparationRaised();
				}
			}
		}
		
		private boolean timePreparation;
		
		
		public boolean isRaisedTimePreparation() {
			synchronized(DefaultSMStatemachine.this) {
				return timePreparation;
			}
		}
		
		protected void raiseTimePreparation() {
			synchronized(DefaultSMStatemachine.this) {
				timePreparation = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onTimePreparationRaised();
				}
			}
		}
		
		private boolean askCoffee;
		
		
		public boolean isRaisedAskCoffee() {
			synchronized(DefaultSMStatemachine.this) {
				return askCoffee;
			}
		}
		
		protected void raiseAskCoffee() {
			synchronized(DefaultSMStatemachine.this) {
				askCoffee = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onAskCoffeeRaised();
				}
			}
		}
		
		private boolean askTea;
		
		
		public boolean isRaisedAskTea() {
			synchronized(DefaultSMStatemachine.this) {
				return askTea;
			}
		}
		
		protected void raiseAskTea() {
			synchronized(DefaultSMStatemachine.this) {
				askTea = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onAskTeaRaised();
				}
			}
		}
		
		private boolean askExpresso;
		
		
		public boolean isRaisedAskExpresso() {
			synchronized(DefaultSMStatemachine.this) {
				return askExpresso;
			}
		}
		
		protected void raiseAskExpresso() {
			synchronized(DefaultSMStatemachine.this) {
				askExpresso = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onAskExpressoRaised();
				}
			}
		}
		
		private boolean askSoup;
		
		
		public boolean isRaisedAskSoup() {
			synchronized(DefaultSMStatemachine.this) {
				return askSoup;
			}
		}
		
		protected void raiseAskSoup() {
			synchronized(DefaultSMStatemachine.this) {
				askSoup = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onAskSoupRaised();
				}
			}
		}
		
		private boolean askIcedTea;
		
		
		public boolean isRaisedAskIcedTea() {
			synchronized(DefaultSMStatemachine.this) {
				return askIcedTea;
			}
		}
		
		protected void raiseAskIcedTea() {
			synchronized(DefaultSMStatemachine.this) {
				askIcedTea = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onAskIcedTeaRaised();
				}
			}
		}
		
		private double solde;
		
		public synchronized double getSolde() {
			synchronized(DefaultSMStatemachine.this) {
				return solde;
			}
		}
		
		public void setSolde(double value) {
			synchronized(DefaultSMStatemachine.this) {
				this.solde = value;
			}
		}
		
		private boolean paymentCard;
		
		public synchronized boolean getPaymentCard() {
			synchronized(DefaultSMStatemachine.this) {
				return paymentCard;
			}
		}
		
		public void setPaymentCard(boolean value) {
			synchronized(DefaultSMStatemachine.this) {
				this.paymentCard = value;
			}
		}
		
		protected void clearEvents() {
			money50centsButton = false;
			money25centsButton = false;
			money10centsButton = false;
			coffeeButton = false;
			teaButton = false;
			expressoButton = false;
			soupButton = false;
			cancelButton = false;
			icedTeaButton = false;
		}
		protected void clearOutEvents() {
		
		updateSolde = false;
		resetSolde = false;
		takeBeverage = false;
		cleaningMachine = false;
		machineReady = false;
		makeCoffee = false;
		makeTea = false;
		makeExpresso = false;
		makeSoup = false;
		makeIcedTea = false;
		cancelPreparation = false;
		timePreparation = false;
		askCoffee = false;
		askTea = false;
		askExpresso = false;
		askSoup = false;
		askIcedTea = false;
		}
		
	}
	
	
	protected SCInterfaceImpl sCInterface;
	
	private boolean initialized = false;
	
	public enum State {
		main_region_Waiting,
		main_region_Take_beverage,
		main_region_Cleaning,
		main_region_Delay_Coffee_Payment,
		main_region_Delay_Coffee_Payment_r1_Coffee_Order,
		main_region_Delay_Coffee_Payment_r1_Tea_Order,
		main_region_Delay_Coffee_Payment_r1_Expresso_Order,
		main_region_Delay_Coffee_Payment_r1_Soup_Order,
		main_region_Delay_Coffee_Payment_r1_IcedTea_Order,
		main_region_Payment_Done,
		main_region_Beverage_Preparation,
		payment_Money,
		$NullState$
	};
	
	private final State[] stateVector = new State[2];
	
	private int nextStateIndex;
	
	private ITimer timer;
	
	private final boolean[] timeEvents = new boolean[10];
	
	private BlockingQueue<Runnable> inEventQueue = new LinkedBlockingQueue<Runnable>();
	private boolean isRunningCycle = false;
	public DefaultSMStatemachine() {
		sCInterface = new SCInterfaceImpl();
	}
	
	public synchronized void init() {
		this.initialized = true;
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		for (int i = 0; i < 2; i++) {
			stateVector[i] = State.$NullState$;
		}
		clearEvents();
		clearOutEvents();
		sCInterface.setSolde(0.0);
		
		sCInterface.setPaymentCard(false);
	}
	
	public synchronized void enter() {
		if (!initialized) {
			throw new IllegalStateException(
				"The state machine needs to be initialized first by calling the init() function."
			);
		}
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		enterSequence_main_region_default();
		enterSequence_Payment_default();
	}
	
	public synchronized void runCycle() {
		if (!initialized)
			throw new IllegalStateException(
					"The state machine needs to be initialized first by calling the init() function.");
		
		if (isRunningCycle) {
			return;
		}
		isRunningCycle = true;
		
		clearOutEvents();
	
		Runnable task = getNextEvent();
		if (task == null) {
			task = getDefaultEvent();
		}
		
		while (task != null) {
			task.run();
			clearEvents();
			task = getNextEvent();
		}
		
		isRunningCycle = false;
	}
	
	protected synchronized void singleCycle() {
		for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
			switch (stateVector[nextStateIndex]) {
				case main_region_Waiting:
					main_region_Waiting_react(true);
					break;
				case main_region_Take_beverage:
					main_region_Take_beverage_react(true);
					break;
				case main_region_Cleaning:
					main_region_Cleaning_react(true);
					break;
				case main_region_Delay_Coffee_Payment_r1_Coffee_Order:
					main_region_Delay_Coffee_Payment_r1_Coffee_Order_react(true);
					break;
				case main_region_Delay_Coffee_Payment_r1_Tea_Order:
					main_region_Delay_Coffee_Payment_r1_Tea_Order_react(true);
					break;
				case main_region_Delay_Coffee_Payment_r1_Expresso_Order:
					main_region_Delay_Coffee_Payment_r1_Expresso_Order_react(true);
					break;
				case main_region_Delay_Coffee_Payment_r1_Soup_Order:
					main_region_Delay_Coffee_Payment_r1_Soup_Order_react(true);
					break;
				case main_region_Delay_Coffee_Payment_r1_IcedTea_Order:
					main_region_Delay_Coffee_Payment_r1_IcedTea_Order_react(true);
					break;
				case main_region_Payment_Done:
					main_region_Payment_Done_react(true);
					break;
				case main_region_Beverage_Preparation:
					main_region_Beverage_Preparation_react(true);
					break;
				case payment_Money:
					payment_Money_react(true);
					break;
			default:
				// $NullState$
			}
		}
	}
	
	protected Runnable getNextEvent() {
		if(!inEventQueue.isEmpty()) {
			return inEventQueue.poll();
		}
		return null;
	}
	
	protected Runnable getDefaultEvent() {
		return new Runnable() {
			@Override
			public void run() {
				singleCycle();
			}
		};
	}
	
	public synchronized void exit() {
		exitSequence_main_region();
		exitSequence_Payment();
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public synchronized boolean isActive() {
		return stateVector[0] != State.$NullState$||stateVector[1] != State.$NullState$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public synchronized boolean isFinal() {
		return false;
	}
	/**
	* This method resets the incoming events (time events included).
	*/
	protected void clearEvents() {
		sCInterface.clearEvents();
		for (int i=0; i<timeEvents.length; i++) {
			timeEvents[i] = false;
		}
	}
	
	/**
	* This method resets the outgoing events.
	*/
	protected void clearOutEvents() {
		sCInterface.clearOutEvents();
	}
	
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public synchronized boolean isStateActive(State state) {
	
		switch (state) {
		case main_region_Waiting:
			return stateVector[0] == State.main_region_Waiting;
		case main_region_Take_beverage:
			return stateVector[0] == State.main_region_Take_beverage;
		case main_region_Cleaning:
			return stateVector[0] == State.main_region_Cleaning;
		case main_region_Delay_Coffee_Payment:
			return stateVector[0].ordinal() >= State.
					main_region_Delay_Coffee_Payment.ordinal()&& stateVector[0].ordinal() <= State.main_region_Delay_Coffee_Payment_r1_IcedTea_Order.ordinal();
		case main_region_Delay_Coffee_Payment_r1_Coffee_Order:
			return stateVector[0] == State.main_region_Delay_Coffee_Payment_r1_Coffee_Order;
		case main_region_Delay_Coffee_Payment_r1_Tea_Order:
			return stateVector[0] == State.main_region_Delay_Coffee_Payment_r1_Tea_Order;
		case main_region_Delay_Coffee_Payment_r1_Expresso_Order:
			return stateVector[0] == State.main_region_Delay_Coffee_Payment_r1_Expresso_Order;
		case main_region_Delay_Coffee_Payment_r1_Soup_Order:
			return stateVector[0] == State.main_region_Delay_Coffee_Payment_r1_Soup_Order;
		case main_region_Delay_Coffee_Payment_r1_IcedTea_Order:
			return stateVector[0] == State.main_region_Delay_Coffee_Payment_r1_IcedTea_Order;
		case main_region_Payment_Done:
			return stateVector[0] == State.main_region_Payment_Done;
		case main_region_Beverage_Preparation:
			return stateVector[0] == State.main_region_Beverage_Preparation;
		case payment_Money:
			return stateVector[1] == State.payment_Money;
		default:
			return false;
		}
	}
	
	/**
	* Set the {@link ITimer} for the state machine. It must be set
	* externally on a timed state machine before a run cycle can be correctly
	* executed.
	* 
	* @param timer
	*/
	public synchronized void setTimer(ITimer timer) {
		this.timer = timer;
	}
	
	/**
	* Returns the currently used timer.
	* 
	* @return {@link ITimer}
	*/
	public ITimer getTimer() {
		return timer;
	}
	
	public synchronized void timeElapsed(int eventID) {
		inEventQueue.add(new Runnable() {
			@Override
			public void run() {
				timeEvents[eventID] = true;
				singleCycle();
			}
		});
		runCycle();
	}
	
	public SCInterface getSCInterface() {
		return sCInterface;
	}
	
	public synchronized void raiseMoney50centsButton() {
		sCInterface.raiseMoney50centsButton();
	}
	
	public synchronized void raiseMoney25centsButton() {
		sCInterface.raiseMoney25centsButton();
	}
	
	public synchronized void raiseMoney10centsButton() {
		sCInterface.raiseMoney10centsButton();
	}
	
	public synchronized void raiseCoffeeButton() {
		sCInterface.raiseCoffeeButton();
	}
	
	public synchronized void raiseTeaButton() {
		sCInterface.raiseTeaButton();
	}
	
	public synchronized void raiseExpressoButton() {
		sCInterface.raiseExpressoButton();
	}
	
	public synchronized void raiseSoupButton() {
		sCInterface.raiseSoupButton();
	}
	
	public synchronized void raiseCancelButton() {
		sCInterface.raiseCancelButton();
	}
	
	public synchronized void raiseIcedTeaButton() {
		sCInterface.raiseIcedTeaButton();
	}
	
	public synchronized boolean isRaisedUpdateSolde() {
		return sCInterface.isRaisedUpdateSolde();
	}
	
	public synchronized boolean isRaisedResetSolde() {
		return sCInterface.isRaisedResetSolde();
	}
	
	public synchronized boolean isRaisedTakeBeverage() {
		return sCInterface.isRaisedTakeBeverage();
	}
	
	public synchronized boolean isRaisedCleaningMachine() {
		return sCInterface.isRaisedCleaningMachine();
	}
	
	public synchronized boolean isRaisedMachineReady() {
		return sCInterface.isRaisedMachineReady();
	}
	
	public synchronized boolean isRaisedMakeCoffee() {
		return sCInterface.isRaisedMakeCoffee();
	}
	
	public synchronized boolean isRaisedMakeTea() {
		return sCInterface.isRaisedMakeTea();
	}
	
	public synchronized boolean isRaisedMakeExpresso() {
		return sCInterface.isRaisedMakeExpresso();
	}
	
	public synchronized boolean isRaisedMakeSoup() {
		return sCInterface.isRaisedMakeSoup();
	}
	
	public synchronized boolean isRaisedMakeIcedTea() {
		return sCInterface.isRaisedMakeIcedTea();
	}
	
	public synchronized boolean isRaisedCancelPreparation() {
		return sCInterface.isRaisedCancelPreparation();
	}
	
	public synchronized boolean isRaisedTimePreparation() {
		return sCInterface.isRaisedTimePreparation();
	}
	
	public synchronized boolean isRaisedAskCoffee() {
		return sCInterface.isRaisedAskCoffee();
	}
	
	public synchronized boolean isRaisedAskTea() {
		return sCInterface.isRaisedAskTea();
	}
	
	public synchronized boolean isRaisedAskExpresso() {
		return sCInterface.isRaisedAskExpresso();
	}
	
	public synchronized boolean isRaisedAskSoup() {
		return sCInterface.isRaisedAskSoup();
	}
	
	public synchronized boolean isRaisedAskIcedTea() {
		return sCInterface.isRaisedAskIcedTea();
	}
	
	public synchronized double getSolde() {
		return sCInterface.getSolde();
	}
	
	public synchronized void setSolde(double value) {
		sCInterface.setSolde(value);
	}
	
	public synchronized boolean getPaymentCard() {
		return sCInterface.getPaymentCard();
	}
	
	public synchronized void setPaymentCard(boolean value) {
		sCInterface.setPaymentCard(value);
	}
	
	/* Entry action for state 'Waiting'. */
	private void entryAction_main_region_Waiting() {
		sCInterface.raiseMachineReady();
	}
	
	/* Entry action for state 'Take beverage'. */
	private void entryAction_main_region_Take_beverage() {
		timer.setTimer(this, 0, 5000, false);
	}
	
	/* Entry action for state 'Cleaning'. */
	private void entryAction_main_region_Cleaning() {
		timer.setTimer(this, 1, 5000, false);
	}
	
	/* Entry action for state 'Delay Coffee Payment'. */
	private void entryAction_main_region_Delay_Coffee_Payment() {
		timer.setTimer(this, 2, (45 * 1000), false);
	}
	
	/* Entry action for state 'Coffee Order'. */
	private void entryAction_main_region_Delay_Coffee_Payment_r1_Coffee_Order() {
		timer.setTimer(this, 3, 1, true);
	}
	
	/* Entry action for state 'Tea Order'. */
	private void entryAction_main_region_Delay_Coffee_Payment_r1_Tea_Order() {
		timer.setTimer(this, 4, 1, true);
	}
	
	/* Entry action for state 'Expresso Order'. */
	private void entryAction_main_region_Delay_Coffee_Payment_r1_Expresso_Order() {
		timer.setTimer(this, 5, 1, true);
	}
	
	/* Entry action for state 'Soup Order'. */
	private void entryAction_main_region_Delay_Coffee_Payment_r1_Soup_Order() {
		timer.setTimer(this, 6, 1, true);
	}
	
	/* Entry action for state 'IcedTea Order'. */
	private void entryAction_main_region_Delay_Coffee_Payment_r1_IcedTea_Order() {
		timer.setTimer(this, 7, 1, true);
	}
	
	/* Entry action for state 'Payment Done'. */
	private void entryAction_main_region_Payment_Done() {
		timer.setTimer(this, 8, 1, false);
	}
	
	/* Entry action for state 'Beverage Preparation'. */
	private void entryAction_main_region_Beverage_Preparation() {
		timer.setTimer(this, 9, 1000, false);
	}
	
	/* Exit action for state 'Take beverage'. */
	private void exitAction_main_region_Take_beverage() {
		timer.unsetTimer(this, 0);
	}
	
	/* Exit action for state 'Cleaning'. */
	private void exitAction_main_region_Cleaning() {
		timer.unsetTimer(this, 1);
	}
	
	/* Exit action for state 'Delay Coffee Payment'. */
	private void exitAction_main_region_Delay_Coffee_Payment() {
		timer.unsetTimer(this, 2);
	}
	
	/* Exit action for state 'Coffee Order'. */
	private void exitAction_main_region_Delay_Coffee_Payment_r1_Coffee_Order() {
		timer.unsetTimer(this, 3);
	}
	
	/* Exit action for state 'Tea Order'. */
	private void exitAction_main_region_Delay_Coffee_Payment_r1_Tea_Order() {
		timer.unsetTimer(this, 4);
	}
	
	/* Exit action for state 'Expresso Order'. */
	private void exitAction_main_region_Delay_Coffee_Payment_r1_Expresso_Order() {
		timer.unsetTimer(this, 5);
	}
	
	/* Exit action for state 'Soup Order'. */
	private void exitAction_main_region_Delay_Coffee_Payment_r1_Soup_Order() {
		timer.unsetTimer(this, 6);
	}
	
	/* Exit action for state 'IcedTea Order'. */
	private void exitAction_main_region_Delay_Coffee_Payment_r1_IcedTea_Order() {
		timer.unsetTimer(this, 7);
	}
	
	/* Exit action for state 'Payment Done'. */
	private void exitAction_main_region_Payment_Done() {
		timer.unsetTimer(this, 8);
	}
	
	/* Exit action for state 'Beverage Preparation'. */
	private void exitAction_main_region_Beverage_Preparation() {
		timer.unsetTimer(this, 9);
	}
	
	/* 'default' enter sequence for state Waiting */
	private void enterSequence_main_region_Waiting_default() {
		entryAction_main_region_Waiting();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Waiting;
	}
	
	/* 'default' enter sequence for state Take beverage */
	private void enterSequence_main_region_Take_beverage_default() {
		entryAction_main_region_Take_beverage();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Take_beverage;
	}
	
	/* 'default' enter sequence for state Cleaning */
	private void enterSequence_main_region_Cleaning_default() {
		entryAction_main_region_Cleaning();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Cleaning;
	}
	
	/* 'default' enter sequence for state Coffee Order */
	private void enterSequence_main_region_Delay_Coffee_Payment_r1_Coffee_Order_default() {
		entryAction_main_region_Delay_Coffee_Payment_r1_Coffee_Order();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Delay_Coffee_Payment_r1_Coffee_Order;
	}
	
	/* 'default' enter sequence for state Tea Order */
	private void enterSequence_main_region_Delay_Coffee_Payment_r1_Tea_Order_default() {
		entryAction_main_region_Delay_Coffee_Payment_r1_Tea_Order();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Delay_Coffee_Payment_r1_Tea_Order;
	}
	
	/* 'default' enter sequence for state Expresso Order */
	private void enterSequence_main_region_Delay_Coffee_Payment_r1_Expresso_Order_default() {
		entryAction_main_region_Delay_Coffee_Payment_r1_Expresso_Order();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Delay_Coffee_Payment_r1_Expresso_Order;
	}
	
	/* 'default' enter sequence for state Soup Order */
	private void enterSequence_main_region_Delay_Coffee_Payment_r1_Soup_Order_default() {
		entryAction_main_region_Delay_Coffee_Payment_r1_Soup_Order();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Delay_Coffee_Payment_r1_Soup_Order;
	}
	
	/* 'default' enter sequence for state IcedTea Order */
	private void enterSequence_main_region_Delay_Coffee_Payment_r1_IcedTea_Order_default() {
		entryAction_main_region_Delay_Coffee_Payment_r1_IcedTea_Order();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Delay_Coffee_Payment_r1_IcedTea_Order;
	}
	
	/* 'default' enter sequence for state Payment Done */
	private void enterSequence_main_region_Payment_Done_default() {
		entryAction_main_region_Payment_Done();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Payment_Done;
	}
	
	/* 'default' enter sequence for state Beverage Preparation */
	private void enterSequence_main_region_Beverage_Preparation_default() {
		entryAction_main_region_Beverage_Preparation();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Beverage_Preparation;
	}
	
	/* 'default' enter sequence for state Money */
	private void enterSequence_Payment_Money_default() {
		nextStateIndex = 1;
		stateVector[1] = State.payment_Money;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		react_main_region__entry_Default();
	}
	
	/* 'default' enter sequence for region Payment */
	private void enterSequence_Payment_default() {
		react_Payment__entry_Default();
	}
	
	/* Default exit sequence for state Waiting */
	private void exitSequence_main_region_Waiting() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state Take beverage */
	private void exitSequence_main_region_Take_beverage() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_main_region_Take_beverage();
	}
	
	/* Default exit sequence for state Cleaning */
	private void exitSequence_main_region_Cleaning() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_main_region_Cleaning();
	}
	
	/* Default exit sequence for state Delay Coffee Payment */
	private void exitSequence_main_region_Delay_Coffee_Payment() {
		exitSequence_main_region_Delay_Coffee_Payment_r1();
		exitAction_main_region_Delay_Coffee_Payment();
	}
	
	/* Default exit sequence for state Coffee Order */
	private void exitSequence_main_region_Delay_Coffee_Payment_r1_Coffee_Order() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_main_region_Delay_Coffee_Payment_r1_Coffee_Order();
	}
	
	/* Default exit sequence for state Tea Order */
	private void exitSequence_main_region_Delay_Coffee_Payment_r1_Tea_Order() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_main_region_Delay_Coffee_Payment_r1_Tea_Order();
	}
	
	/* Default exit sequence for state Expresso Order */
	private void exitSequence_main_region_Delay_Coffee_Payment_r1_Expresso_Order() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_main_region_Delay_Coffee_Payment_r1_Expresso_Order();
	}
	
	/* Default exit sequence for state Soup Order */
	private void exitSequence_main_region_Delay_Coffee_Payment_r1_Soup_Order() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_main_region_Delay_Coffee_Payment_r1_Soup_Order();
	}
	
	/* Default exit sequence for state IcedTea Order */
	private void exitSequence_main_region_Delay_Coffee_Payment_r1_IcedTea_Order() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_main_region_Delay_Coffee_Payment_r1_IcedTea_Order();
	}
	
	/* Default exit sequence for state Payment Done */
	private void exitSequence_main_region_Payment_Done() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_main_region_Payment_Done();
	}
	
	/* Default exit sequence for state Beverage Preparation */
	private void exitSequence_main_region_Beverage_Preparation() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_main_region_Beverage_Preparation();
	}
	
	/* Default exit sequence for state Money */
	private void exitSequence_Payment_Money() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		switch (stateVector[0]) {
		case main_region_Waiting:
			exitSequence_main_region_Waiting();
			break;
		case main_region_Take_beverage:
			exitSequence_main_region_Take_beverage();
			break;
		case main_region_Cleaning:
			exitSequence_main_region_Cleaning();
			break;
		case main_region_Delay_Coffee_Payment_r1_Coffee_Order:
			exitSequence_main_region_Delay_Coffee_Payment_r1_Coffee_Order();
			exitAction_main_region_Delay_Coffee_Payment();
			break;
		case main_region_Delay_Coffee_Payment_r1_Tea_Order:
			exitSequence_main_region_Delay_Coffee_Payment_r1_Tea_Order();
			exitAction_main_region_Delay_Coffee_Payment();
			break;
		case main_region_Delay_Coffee_Payment_r1_Expresso_Order:
			exitSequence_main_region_Delay_Coffee_Payment_r1_Expresso_Order();
			exitAction_main_region_Delay_Coffee_Payment();
			break;
		case main_region_Delay_Coffee_Payment_r1_Soup_Order:
			exitSequence_main_region_Delay_Coffee_Payment_r1_Soup_Order();
			exitAction_main_region_Delay_Coffee_Payment();
			break;
		case main_region_Delay_Coffee_Payment_r1_IcedTea_Order:
			exitSequence_main_region_Delay_Coffee_Payment_r1_IcedTea_Order();
			exitAction_main_region_Delay_Coffee_Payment();
			break;
		case main_region_Payment_Done:
			exitSequence_main_region_Payment_Done();
			break;
		case main_region_Beverage_Preparation:
			exitSequence_main_region_Beverage_Preparation();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_region_Delay_Coffee_Payment_r1() {
		switch (stateVector[0]) {
		case main_region_Delay_Coffee_Payment_r1_Coffee_Order:
			exitSequence_main_region_Delay_Coffee_Payment_r1_Coffee_Order();
			break;
		case main_region_Delay_Coffee_Payment_r1_Tea_Order:
			exitSequence_main_region_Delay_Coffee_Payment_r1_Tea_Order();
			break;
		case main_region_Delay_Coffee_Payment_r1_Expresso_Order:
			exitSequence_main_region_Delay_Coffee_Payment_r1_Expresso_Order();
			break;
		case main_region_Delay_Coffee_Payment_r1_Soup_Order:
			exitSequence_main_region_Delay_Coffee_Payment_r1_Soup_Order();
			break;
		case main_region_Delay_Coffee_Payment_r1_IcedTea_Order:
			exitSequence_main_region_Delay_Coffee_Payment_r1_IcedTea_Order();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region Payment */
	private void exitSequence_Payment() {
		switch (stateVector[1]) {
		case payment_Money:
			exitSequence_Payment_Money();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		enterSequence_main_region_Waiting_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_Payment__entry_Default() {
		enterSequence_Payment_Money_default();
	}
	
	private boolean react() {
		return false;
	}
	
	private boolean main_region_Waiting_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.coffeeButton) {
				exitSequence_main_region_Waiting();
				sCInterface.raiseAskCoffee();
				
				entryAction_main_region_Delay_Coffee_Payment();
				enterSequence_main_region_Delay_Coffee_Payment_r1_Coffee_Order_default();
			} else {
				if (sCInterface.teaButton) {
					exitSequence_main_region_Waiting();
					sCInterface.raiseAskTea();
					
					entryAction_main_region_Delay_Coffee_Payment();
					enterSequence_main_region_Delay_Coffee_Payment_r1_Tea_Order_default();
				} else {
					if (sCInterface.expressoButton) {
						exitSequence_main_region_Waiting();
						sCInterface.raiseAskExpresso();
						
						entryAction_main_region_Delay_Coffee_Payment();
						enterSequence_main_region_Delay_Coffee_Payment_r1_Expresso_Order_default();
					} else {
						if (sCInterface.soupButton) {
							exitSequence_main_region_Waiting();
							sCInterface.raiseAskSoup();
							
							entryAction_main_region_Delay_Coffee_Payment();
							enterSequence_main_region_Delay_Coffee_Payment_r1_Soup_Order_default();
						} else {
							if (sCInterface.icedTeaButton) {
								exitSequence_main_region_Waiting();
								sCInterface.raiseAskIcedTea();
								
								entryAction_main_region_Delay_Coffee_Payment();
								enterSequence_main_region_Delay_Coffee_Payment_r1_IcedTea_Order_default();
							} else {
								did_transition = false;
							}
						}
					}
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Take_beverage_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[0]) {
				exitSequence_main_region_Take_beverage();
				sCInterface.raiseCleaningMachine();
				
				enterSequence_main_region_Cleaning_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Cleaning_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[1]) {
				exitSequence_main_region_Cleaning();
				sCInterface.raiseMachineReady();
				
				enterSequence_main_region_Waiting_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Delay_Coffee_Payment_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.cancelButton) {
				exitSequence_main_region_Delay_Coffee_Payment();
				sCInterface.raiseCancelPreparation();
				
				enterSequence_main_region_Waiting_default();
			} else {
				if (timeEvents[2]) {
					exitSequence_main_region_Delay_Coffee_Payment();
					sCInterface.raiseResetSolde();
					
					enterSequence_main_region_Waiting_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Delay_Coffee_Payment_r1_Coffee_Order_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((timeEvents[3]) && ((sCInterface.getSolde()>0.34 || sCInterface.getPaymentCard()==true)))) {
				exitSequence_main_region_Delay_Coffee_Payment();
				sCInterface.raiseMakeCoffee();
				
				enterSequence_main_region_Payment_Done_default();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_region_Delay_Coffee_Payment_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_Delay_Coffee_Payment_r1_Tea_Order_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((timeEvents[4]) && ((sCInterface.getSolde()>0.39 || sCInterface.getPaymentCard()==true)))) {
				exitSequence_main_region_Delay_Coffee_Payment();
				sCInterface.raiseMakeTea();
				
				enterSequence_main_region_Payment_Done_default();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_region_Delay_Coffee_Payment_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_Delay_Coffee_Payment_r1_Expresso_Order_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((timeEvents[5]) && ((sCInterface.getSolde()>0.49 || sCInterface.getPaymentCard()==true)))) {
				exitSequence_main_region_Delay_Coffee_Payment();
				sCInterface.raiseMakeExpresso();
				
				enterSequence_main_region_Payment_Done_default();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_region_Delay_Coffee_Payment_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_Delay_Coffee_Payment_r1_Soup_Order_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((timeEvents[6]) && ((sCInterface.getSolde()>0.99 || sCInterface.getPaymentCard()==true)))) {
				exitSequence_main_region_Delay_Coffee_Payment();
				sCInterface.raiseMakeSoup();
				
				enterSequence_main_region_Payment_Done_default();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_region_Delay_Coffee_Payment_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_Delay_Coffee_Payment_r1_IcedTea_Order_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((timeEvents[7]) && ((sCInterface.getSolde()>1.29 || sCInterface.getPaymentCard()==true)))) {
				exitSequence_main_region_Delay_Coffee_Payment();
				sCInterface.raiseMakeIcedTea();
				
				enterSequence_main_region_Payment_Done_default();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_region_Delay_Coffee_Payment_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_Payment_Done_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[8]) {
				exitSequence_main_region_Payment_Done();
				sCInterface.raiseTimePreparation();
				
				enterSequence_main_region_Beverage_Preparation_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Beverage_Preparation_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[9]) {
				exitSequence_main_region_Beverage_Preparation();
				sCInterface.raiseTakeBeverage();
				
				enterSequence_main_region_Take_beverage_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean payment_Money_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if ((sCInterface.money50centsButton || (sCInterface.money25centsButton || sCInterface.money10centsButton))) {
				exitSequence_Payment_Money();
				sCInterface.raiseUpdateSolde();
				
				enterSequence_Payment_Money_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
}
